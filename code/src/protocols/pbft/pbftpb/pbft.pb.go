// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocols/pbft/pbftpb/pbft.proto

package pbftpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb "github.com/nithinkatla00/RL-MultiLeaderProtocolSwitcher/peer/peerpb"
	commandpb "github.com/nithinkatla00/RL-MultiLeaderProtocolSwitcher/pkg/command/commandpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InstanceState_Status int32

const (
	InstanceState_None        InstanceState_Status = 0
	InstanceState_PrePrepared InstanceState_Status = 1
	InstanceState_Prepared    InstanceState_Status = 2
	InstanceState_Committed   InstanceState_Status = 3
	InstanceState_Executed    InstanceState_Status = 4
)

var InstanceState_Status_name = map[int32]string{
	0: "None",
	1: "PrePrepared",
	2: "Prepared",
	3: "Committed",
	4: "Executed",
}

var InstanceState_Status_value = map[string]int32{
	"None":        0,
	"PrePrepared": 1,
	"Prepared":    2,
	"Committed":   3,
	"Executed":    4,
}

func (x InstanceState_Status) String() string {
	return proto.EnumName(InstanceState_Status_name, int32(x))
}

func (InstanceState_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c3640e00c465816a, []int{1, 0}
}

type AgreementMessage_Type int32

const (
	AgreementMessage_PrePrepare AgreementMessage_Type = 0
	AgreementMessage_Prepare    AgreementMessage_Type = 1
	AgreementMessage_Commit     AgreementMessage_Type = 2
)

var AgreementMessage_Type_name = map[int32]string{
	0: "PrePrepare",
	1: "Prepare",
	2: "Commit",
}

var AgreementMessage_Type_value = map[string]int32{
	"PrePrepare": 0,
	"Prepare":    1,
	"Commit":     2,
}

func (x AgreementMessage_Type) String() string {
	return proto.EnumName(AgreementMessage_Type_name, int32(x))
}

func (AgreementMessage_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c3640e00c465816a, []int{2, 0}
}

type PBFTMessage struct {
	// Types that are valid to be assigned to Type:
	//	*PBFTMessage_Agreement
	//	*PBFTMessage_ViewChange
	//	*PBFTMessage_ViewChangeAck
	//	*PBFTMessage_NewView
	Type isPBFTMessage_Type `protobuf_oneof:"type"`
}

func (m *PBFTMessage) Reset()         { *m = PBFTMessage{} }
func (m *PBFTMessage) String() string { return proto.CompactTextString(m) }
func (*PBFTMessage) ProtoMessage()    {}
func (*PBFTMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3640e00c465816a, []int{0}
}
func (m *PBFTMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PBFTMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PBFTMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PBFTMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBFTMessage.Merge(m, src)
}
func (m *PBFTMessage) XXX_Size() int {
	return m.Size()
}
func (m *PBFTMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PBFTMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PBFTMessage proto.InternalMessageInfo

type isPBFTMessage_Type interface {
	isPBFTMessage_Type()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PBFTMessage_Agreement struct {
	Agreement *AgreementMessage `protobuf:"bytes,1,opt,name=agreement,proto3,oneof" json:"agreement,omitempty"`
}
type PBFTMessage_ViewChange struct {
	ViewChange *ViewChangeMessage `protobuf:"bytes,2,opt,name=view_change,json=viewChange,proto3,oneof" json:"view_change,omitempty"`
}
type PBFTMessage_ViewChangeAck struct {
	ViewChangeAck *ViewChangeAckMessage `protobuf:"bytes,3,opt,name=view_change_ack,json=viewChangeAck,proto3,oneof" json:"view_change_ack,omitempty"`
}
type PBFTMessage_NewView struct {
	NewView *NewViewMessage `protobuf:"bytes,4,opt,name=new_view,json=newView,proto3,oneof" json:"new_view,omitempty"`
}

func (*PBFTMessage_Agreement) isPBFTMessage_Type()     {}
func (*PBFTMessage_ViewChange) isPBFTMessage_Type()    {}
func (*PBFTMessage_ViewChangeAck) isPBFTMessage_Type() {}
func (*PBFTMessage_NewView) isPBFTMessage_Type()       {}

func (m *PBFTMessage) GetType() isPBFTMessage_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *PBFTMessage) GetAgreement() *AgreementMessage {
	if x, ok := m.GetType().(*PBFTMessage_Agreement); ok {
		return x.Agreement
	}
	return nil
}

func (m *PBFTMessage) GetViewChange() *ViewChangeMessage {
	if x, ok := m.GetType().(*PBFTMessage_ViewChange); ok {
		return x.ViewChange
	}
	return nil
}

func (m *PBFTMessage) GetViewChangeAck() *ViewChangeAckMessage {
	if x, ok := m.GetType().(*PBFTMessage_ViewChangeAck); ok {
		return x.ViewChangeAck
	}
	return nil
}

func (m *PBFTMessage) GetNewView() *NewViewMessage {
	if x, ok := m.GetType().(*PBFTMessage_NewView); ok {
		return x.NewView
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PBFTMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PBFTMessage_Agreement)(nil),
		(*PBFTMessage_ViewChange)(nil),
		(*PBFTMessage_ViewChangeAck)(nil),
		(*PBFTMessage_NewView)(nil),
	}
}

type InstanceState struct {
	View        View                 `protobuf:"varint,1,opt,name=view,proto3,casttype=View" json:"view,omitempty"`
	Index       Index                `protobuf:"varint,2,opt,name=index,proto3,casttype=Index" json:"index,omitempty"`
	Status      InstanceState_Status `protobuf:"varint,3,opt,name=status,proto3,enum=pbftpb.InstanceState_Status" json:"status,omitempty"`
	Command     *commandpb.Command   `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	CommandHash []byte               `protobuf:"bytes,5,opt,name=command_hash,json=commandHash,proto3" json:"command_hash,omitempty"`
}

func (m *InstanceState) Reset()         { *m = InstanceState{} }
func (m *InstanceState) String() string { return proto.CompactTextString(m) }
func (*InstanceState) ProtoMessage()    {}
func (*InstanceState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3640e00c465816a, []int{1}
}
func (m *InstanceState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstanceState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstanceState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceState.Merge(m, src)
}
func (m *InstanceState) XXX_Size() int {
	return m.Size()
}
func (m *InstanceState) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceState.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceState proto.InternalMessageInfo

func (m *InstanceState) GetView() View {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *InstanceState) GetIndex() Index {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *InstanceState) GetStatus() InstanceState_Status {
	if m != nil {
		return m.Status
	}
	return InstanceState_None
}

func (m *InstanceState) GetCommand() *commandpb.Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *InstanceState) GetCommandHash() []byte {
	if m != nil {
		return m.CommandHash
	}
	return nil
}

type AgreementMessage struct {
	View        View                  `protobuf:"varint,1,opt,name=view,proto3,casttype=View" json:"view,omitempty"`
	Index       Index                 `protobuf:"varint,2,opt,name=index,proto3,casttype=Index" json:"index,omitempty"`
	Type        AgreementMessage_Type `protobuf:"varint,3,opt,name=type,proto3,enum=pbftpb.AgreementMessage_Type" json:"type,omitempty"`
	Command     *commandpb.Command    `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	CommandHash []byte                `protobuf:"bytes,5,opt,name=command_hash,json=commandHash,proto3" json:"command_hash,omitempty"`
}

func (m *AgreementMessage) Reset()         { *m = AgreementMessage{} }
func (m *AgreementMessage) String() string { return proto.CompactTextString(m) }
func (*AgreementMessage) ProtoMessage()    {}
func (*AgreementMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3640e00c465816a, []int{2}
}
func (m *AgreementMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgreementMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgreementMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgreementMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgreementMessage.Merge(m, src)
}
func (m *AgreementMessage) XXX_Size() int {
	return m.Size()
}
func (m *AgreementMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AgreementMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AgreementMessage proto.InternalMessageInfo

func (m *AgreementMessage) GetView() View {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *AgreementMessage) GetIndex() Index {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *AgreementMessage) GetType() AgreementMessage_Type {
	if m != nil {
		return m.Type
	}
	return AgreementMessage_PrePrepare
}

func (m *AgreementMessage) GetCommand() *commandpb.Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *AgreementMessage) GetCommandHash() []byte {
	if m != nil {
		return m.CommandHash
	}
	return nil
}

type ViewChangeMessage struct {
	NewView   View            `protobuf:"varint,1,opt,name=new_view,json=newView,proto3,casttype=View" json:"new_view,omitempty"`
	LowIndex  Index           `protobuf:"varint,2,opt,name=low_index,json=lowIndex,proto3,casttype=Index" json:"low_index,omitempty"`
	HighIndex Index           `protobuf:"varint,3,opt,name=high_index,json=highIndex,proto3,casttype=Index" json:"high_index,omitempty"`
	PSet      []InstanceState `protobuf:"bytes,4,rep,name=p_set,json=pSet,proto3" json:"p_set"`
	QSet      []InstanceState `protobuf:"bytes,5,rep,name=q_set,json=qSet,proto3" json:"q_set"`
}

func (m *ViewChangeMessage) Reset()         { *m = ViewChangeMessage{} }
func (m *ViewChangeMessage) String() string { return proto.CompactTextString(m) }
func (*ViewChangeMessage) ProtoMessage()    {}
func (*ViewChangeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3640e00c465816a, []int{3}
}
func (m *ViewChangeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewChangeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewChangeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewChangeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewChangeMessage.Merge(m, src)
}
func (m *ViewChangeMessage) XXX_Size() int {
	return m.Size()
}
func (m *ViewChangeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewChangeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ViewChangeMessage proto.InternalMessageInfo

func (m *ViewChangeMessage) GetNewView() View {
	if m != nil {
		return m.NewView
	}
	return 0
}

func (m *ViewChangeMessage) GetLowIndex() Index {
	if m != nil {
		return m.LowIndex
	}
	return 0
}

func (m *ViewChangeMessage) GetHighIndex() Index {
	if m != nil {
		return m.HighIndex
	}
	return 0
}

func (m *ViewChangeMessage) GetPSet() []InstanceState {
	if m != nil {
		return m.PSet
	}
	return nil
}

func (m *ViewChangeMessage) GetQSet() []InstanceState {
	if m != nil {
		return m.QSet
	}
	return nil
}

type ViewChangeAckMessage struct {
	NewView View                                                                       `protobuf:"varint,1,opt,name=new_view,json=newView,proto3,casttype=View" json:"new_view,omitempty"`
	AckFor  github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb.PeerID `protobuf:"varint,2,opt,name=ack_for,json=ackFor,proto3,casttype=github.com/nithinkatla00/RL-MultiLeaderProtocolSwitcher/peer/peerpb.PeerID" json:"ack_for,omitempty"`
	Digest  []byte                                                                     `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *ViewChangeAckMessage) Reset()         { *m = ViewChangeAckMessage{} }
func (m *ViewChangeAckMessage) String() string { return proto.CompactTextString(m) }
func (*ViewChangeAckMessage) ProtoMessage()    {}
func (*ViewChangeAckMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3640e00c465816a, []int{4}
}
func (m *ViewChangeAckMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewChangeAckMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewChangeAckMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewChangeAckMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewChangeAckMessage.Merge(m, src)
}
func (m *ViewChangeAckMessage) XXX_Size() int {
	return m.Size()
}
func (m *ViewChangeAckMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewChangeAckMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ViewChangeAckMessage proto.InternalMessageInfo

func (m *ViewChangeAckMessage) GetNewView() View {
	if m != nil {
		return m.NewView
	}
	return 0
}

func (m *ViewChangeAckMessage) GetAckFor() github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb.PeerID {
	if m != nil {
		return m.AckFor
	}
	return 0
}

func (m *ViewChangeAckMessage) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

type NewViewProof struct {
	AckFor github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb.PeerID `protobuf:"varint,2,opt,name=ack_for,json=ackFor,proto3,casttype=github.com/nithinkatla00/RL-MultiLeaderProtocolSwitcher/peer/peerpb.PeerID" json:"ack_for,omitempty"`
	Digest []byte                                                                     `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *NewViewProof) Reset()         { *m = NewViewProof{} }
func (m *NewViewProof) String() string { return proto.CompactTextString(m) }
func (*NewViewProof) ProtoMessage()    {}
func (*NewViewProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3640e00c465816a, []int{5}
}
func (m *NewViewProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewViewProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewViewProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewViewProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewViewProof.Merge(m, src)
}
func (m *NewViewProof) XXX_Size() int {
	return m.Size()
}
func (m *NewViewProof) XXX_DiscardUnknown() {
	xxx_messageInfo_NewViewProof.DiscardUnknown(m)
}

var xxx_messageInfo_NewViewProof proto.InternalMessageInfo

func (m *NewViewProof) GetAckFor() github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb.PeerID {
	if m != nil {
		return m.AckFor
	}
	return 0
}

func (m *NewViewProof) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

type NewViewMessage struct {
	NewView   View                    `protobuf:"varint,1,opt,name=new_view,json=newView,proto3,casttype=View" json:"new_view,omitempty"`
	NvProof   []NewViewProof          `protobuf:"bytes,2,rep,name=nv_proof,json=nvProof,proto3" json:"nv_proof"`
	Instances map[Index]InstanceState `protobuf:"bytes,3,rep,name=instances,proto3,castkey=Index" json:"instances" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *NewViewMessage) Reset()         { *m = NewViewMessage{} }
func (m *NewViewMessage) String() string { return proto.CompactTextString(m) }
func (*NewViewMessage) ProtoMessage()    {}
func (*NewViewMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3640e00c465816a, []int{6}
}
func (m *NewViewMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewViewMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewViewMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewViewMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewViewMessage.Merge(m, src)
}
func (m *NewViewMessage) XXX_Size() int {
	return m.Size()
}
func (m *NewViewMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NewViewMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NewViewMessage proto.InternalMessageInfo

func (m *NewViewMessage) GetNewView() View {
	if m != nil {
		return m.NewView
	}
	return 0
}

func (m *NewViewMessage) GetNvProof() []NewViewProof {
	if m != nil {
		return m.NvProof
	}
	return nil
}

func (m *NewViewMessage) GetInstances() map[Index]InstanceState {
	if m != nil {
		return m.Instances
	}
	return nil
}

func init() {
	proto.RegisterEnum("pbftpb.InstanceState_Status", InstanceState_Status_name, InstanceState_Status_value)
	proto.RegisterEnum("pbftpb.AgreementMessage_Type", AgreementMessage_Type_name, AgreementMessage_Type_value)
	proto.RegisterType((*PBFTMessage)(nil), "pbftpb.PBFTMessage")
	proto.RegisterType((*InstanceState)(nil), "pbftpb.InstanceState")
	proto.RegisterType((*AgreementMessage)(nil), "pbftpb.AgreementMessage")
	proto.RegisterType((*ViewChangeMessage)(nil), "pbftpb.ViewChangeMessage")
	proto.RegisterType((*ViewChangeAckMessage)(nil), "pbftpb.ViewChangeAckMessage")
	proto.RegisterType((*NewViewProof)(nil), "pbftpb.NewViewProof")
	proto.RegisterType((*NewViewMessage)(nil), "pbftpb.NewViewMessage")
	proto.RegisterMapType((map[Index]InstanceState)(nil), "pbftpb.NewViewMessage.InstancesEntry")
}

func init() { proto.RegisterFile("protocols/pbft/pbftpb/pbft.proto", fileDescriptor_c3640e00c465816a) }

var fileDescriptor_c3640e00c465816a = []byte{
	// 810 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0x4f, 0x6f, 0xe3, 0x54,
	0x10, 0x8f, 0x1d, 0xc7, 0x49, 0x26, 0x7f, 0x36, 0x3c, 0x95, 0x95, 0xa9, 0x96, 0x24, 0x64, 0x05,
	0x8a, 0x04, 0x38, 0x65, 0x17, 0xa4, 0x15, 0xe2, 0xb2, 0x59, 0xb6, 0xda, 0xa2, 0x6d, 0x14, 0x39,
	0x15, 0x07, 0x2e, 0xd6, 0x8b, 0x33, 0xb5, 0xad, 0xa4, 0xb6, 0x6b, 0xbf, 0x24, 0xcd, 0x95, 0x03,
	0x07, 0x2e, 0x70, 0xe1, 0x23, 0xf0, 0x2d, 0xf8, 0x00, 0x3d, 0xf6, 0xc8, 0x29, 0xa0, 0xf6, 0xce,
	0x07, 0xe8, 0x09, 0xbd, 0x67, 0x3b, 0x69, 0xd3, 0x54, 0xaa, 0x00, 0x89, 0x4b, 0x3c, 0xef, 0x37,
	0xbf, 0x99, 0xe7, 0xf9, 0xcd, 0x64, 0x0c, 0xcd, 0x20, 0xf4, 0x99, 0x6f, 0xf9, 0x93, 0xa8, 0x13,
	0x0c, 0x8f, 0x99, 0xf8, 0x09, 0x86, 0xe2, 0xa1, 0x0b, 0x17, 0x51, 0x63, 0x68, 0x77, 0xc7, 0xf6,
	0x6d, 0x5f, 0x40, 0x1d, 0x6e, 0xc5, 0xde, 0xdd, 0xa7, 0xc1, 0xd8, 0xee, 0x58, 0xfe, 0xc9, 0x09,
	0xf5, 0x46, 0xe9, 0x33, 0x18, 0xa6, 0x56, 0x4c, 0x6a, 0xfd, 0x28, 0x43, 0xa9, 0xdf, 0xdd, 0x3f,
	0x3a, 0xc4, 0x28, 0xa2, 0x36, 0x92, 0x17, 0x50, 0xa4, 0x76, 0x88, 0x78, 0x82, 0x1e, 0xd3, 0xa4,
	0xa6, 0xd4, 0x2e, 0x3d, 0xd3, 0xf4, 0xf8, 0x1a, 0xfd, 0x65, 0xea, 0x48, 0xc8, 0x6f, 0x32, 0xc6,
	0x9a, 0x4c, 0xbe, 0x82, 0xd2, 0xcc, 0xc5, 0xb9, 0x69, 0x39, 0xd4, 0xb3, 0x51, 0x93, 0x45, 0xec,
	0x7b, 0x69, 0xec, 0xb7, 0x2e, 0xce, 0x5f, 0x09, 0xcf, 0x3a, 0x18, 0x66, 0x2b, 0x90, 0xec, 0xc3,
	0xa3, 0x1b, 0xd1, 0x26, 0xb5, 0xc6, 0x5a, 0x56, 0x64, 0x78, 0x72, 0x37, 0xc3, 0x4b, 0x6b, 0xbc,
	0x4e, 0x52, 0x99, 0xdd, 0xc4, 0xc9, 0x73, 0x28, 0x78, 0x38, 0x37, 0x39, 0xa8, 0x29, 0x22, 0xc1,
	0xe3, 0x34, 0x41, 0x0f, 0xe7, 0x3c, 0xc7, 0x3a, 0x34, 0xef, 0xc5, 0x48, 0x57, 0x05, 0x85, 0x2d,
	0x02, 0x6c, 0xfd, 0x2a, 0x43, 0xe5, 0xc0, 0x8b, 0x18, 0xf5, 0x2c, 0x1c, 0x30, 0xca, 0x90, 0x3c,
	0x01, 0x45, 0xa4, 0xe2, 0x4a, 0x28, 0xdd, 0xc2, 0xf5, 0xb2, 0xa1, 0xf0, 0x08, 0x43, 0xa0, 0xa4,
	0x01, 0x39, 0xd7, 0x1b, 0xe1, 0x99, 0x28, 0x56, 0xe9, 0x16, 0xaf, 0x97, 0x8d, 0xdc, 0x01, 0x07,
	0x8c, 0x18, 0x27, 0x9f, 0x83, 0x1a, 0x31, 0xca, 0xa6, 0x91, 0x28, 0xa6, 0xba, 0x2e, 0xe6, 0xd6,
	0x2d, 0xfa, 0x40, 0x70, 0x8c, 0x84, 0x4b, 0x3e, 0x81, 0x7c, 0xd2, 0xa4, 0xa4, 0x04, 0xa2, 0xaf,
	0xda, 0xa7, 0xbf, 0x8a, 0x2d, 0x23, 0xa5, 0x90, 0x0f, 0xa0, 0x9c, 0x98, 0xa6, 0x43, 0x23, 0x47,
	0xcb, 0x35, 0xa5, 0x76, 0xd9, 0x28, 0x25, 0xd8, 0x1b, 0x1a, 0x39, 0xad, 0x1e, 0xa8, 0xf1, 0x15,
	0xa4, 0x00, 0x4a, 0xcf, 0xf7, 0xb0, 0x96, 0x21, 0x8f, 0xa0, 0xd4, 0x0f, 0xb1, 0x1f, 0x62, 0x40,
	0x43, 0x1c, 0xd5, 0x24, 0x52, 0x86, 0xc2, 0xea, 0x24, 0x93, 0x0a, 0x14, 0xf9, 0x4d, 0x2e, 0x63,
	0x38, 0xaa, 0x65, 0xb9, 0xf3, 0xf5, 0x19, 0x5a, 0x53, 0x7e, 0x52, 0x5a, 0x3f, 0xc8, 0x50, 0xdb,
	0x1c, 0x86, 0x7f, 0x2b, 0xd5, 0x67, 0x71, 0x0f, 0x12, 0xa1, 0xde, 0xbf, 0x6f, 0xe6, 0xf4, 0xa3,
	0x45, 0x80, 0x86, 0xa0, 0xfe, 0xf7, 0x3a, 0x75, 0x40, 0xe1, 0xe9, 0x49, 0x15, 0x60, 0xad, 0x4d,
	0x2d, 0x43, 0x4a, 0x90, 0x4f, 0x0f, 0x12, 0x01, 0x50, 0x63, 0x65, 0x6a, 0x72, 0xeb, 0x2f, 0x09,
	0xde, 0xb9, 0x33, 0xd9, 0xe4, 0xe9, 0x8d, 0x19, 0xdc, 0x54, 0x23, 0x9d, 0x39, 0xf2, 0x11, 0x14,
	0x27, 0xfe, 0xdc, 0xbc, 0x47, 0x94, 0xc2, 0xc4, 0x9f, 0x0b, 0x8b, 0xb4, 0x01, 0x1c, 0xd7, 0x76,
	0x12, 0x62, 0x76, 0x93, 0x58, 0xe4, 0xce, 0x98, 0xb9, 0x07, 0xb9, 0xc0, 0x8c, 0x90, 0x69, 0x4a,
	0x33, 0xdb, 0x2e, 0x3d, 0x7b, 0x77, 0xeb, 0xac, 0x75, 0x95, 0xf3, 0x65, 0x23, 0x63, 0x28, 0xc1,
	0x00, 0x19, 0x8f, 0x38, 0x15, 0x11, 0xb9, 0x07, 0x44, 0x9c, 0x0e, 0x90, 0xb5, 0x7e, 0x93, 0x60,
	0x67, 0xdb, 0x1f, 0xf1, 0x61, 0x35, 0xdb, 0x90, 0xa7, 0xd6, 0xd8, 0x3c, 0xf6, 0xc3, 0xa4, 0xe2,
	0xde, 0xf5, 0xb2, 0xf1, 0x8d, 0xed, 0x32, 0x67, 0x3a, 0xe4, 0xad, 0xeb, 0x78, 0x2e, 0x73, 0x5c,
	0x6f, 0x4c, 0xd9, 0x84, 0xee, 0xed, 0x75, 0x8c, 0xb7, 0x9f, 0x1e, 0x4e, 0x27, 0xcc, 0x7d, 0x8b,
	0x74, 0x84, 0x61, 0x3f, 0xd9, 0x86, 0x83, 0xb9, 0xcb, 0x2c, 0x07, 0xc3, 0x4e, 0x80, 0xc9, 0x4f,
	0x30, 0xd4, 0xfb, 0x88, 0xe1, 0xc1, 0xd7, 0x86, 0x4a, 0xad, 0xf1, 0xbe, 0x1f, 0x92, 0xc7, 0xa0,
	0x8e, 0x5c, 0x1b, 0x23, 0x26, 0x04, 0x2b, 0x1b, 0xc9, 0xa9, 0xf5, 0x93, 0x04, 0xe5, 0x64, 0x0d,
	0xf4, 0x43, 0xdf, 0x3f, 0xfe, 0xff, 0xdf, 0xe8, 0x17, 0x19, 0xaa, 0xb7, 0x17, 0xd3, 0xc3, 0xa4,
	0xfc, 0x02, 0x0a, 0xde, 0xcc, 0x0c, 0x78, 0x11, 0x9a, 0x2c, 0xba, 0xb7, 0xb3, 0xb1, 0xe7, 0x44,
	0x81, 0x49, 0xf3, 0xf2, 0xde, 0x2c, 0xae, 0xd7, 0x80, 0xa2, 0x9b, 0x34, 0x97, 0xef, 0x24, 0x1e,
	0xf7, 0xe1, 0xf6, 0xfd, 0xb8, 0x1a, 0x82, 0xe8, 0xb5, 0xc7, 0xc2, 0x45, 0xb7, 0xc2, 0x13, 0x7d,
	0xff, 0xc7, 0x6a, 0xee, 0x56, 0x69, 0x76, 0x07, 0x50, 0xbd, 0xcd, 0x25, 0x35, 0xc8, 0x8e, 0x71,
	0x11, 0xbf, 0xbc, 0xc1, 0x4d, 0xf2, 0x31, 0xe4, 0x66, 0x74, 0x32, 0x4d, 0x3f, 0x0b, 0xdb, 0x27,
	0xcd, 0x88, 0x39, 0x5f, 0xca, 0x2f, 0xa4, 0xae, 0x7d, 0x7e, 0x59, 0x97, 0x2e, 0x2e, 0xeb, 0xd2,
	0x9f, 0x97, 0x75, 0xe9, 0xe7, 0xab, 0x7a, 0xe6, 0xe2, 0xaa, 0x9e, 0xf9, 0xfd, 0xaa, 0x9e, 0xf9,
	0xee, 0xf0, 0x1f, 0x77, 0x67, 0xdb, 0xe7, 0x74, 0xa8, 0x0a, 0xf8, 0xf9, 0xdf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x91, 0xbf, 0x46, 0xe4, 0x6e, 0x07, 0x00, 0x00,
}

func (m *PBFTMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PBFTMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PBFTMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PBFTMessage_Agreement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PBFTMessage_Agreement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Agreement != nil {
		{
			size, err := m.Agreement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *PBFTMessage_ViewChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PBFTMessage_ViewChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ViewChange != nil {
		{
			size, err := m.ViewChange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PBFTMessage_ViewChangeAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PBFTMessage_ViewChangeAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ViewChangeAck != nil {
		{
			size, err := m.ViewChangeAck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *PBFTMessage_NewView) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PBFTMessage_NewView) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NewView != nil {
		{
			size, err := m.NewView.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *InstanceState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstanceState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommandHash) > 0 {
		i -= len(m.CommandHash)
		copy(dAtA[i:], m.CommandHash)
		i = encodeVarintPbft(dAtA, i, uint64(len(m.CommandHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintPbft(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintPbft(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.View != 0 {
		i = encodeVarintPbft(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AgreementMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgreementMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgreementMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommandHash) > 0 {
		i -= len(m.CommandHash)
		copy(dAtA[i:], m.CommandHash)
		i = encodeVarintPbft(dAtA, i, uint64(len(m.CommandHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintPbft(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintPbft(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.View != 0 {
		i = encodeVarintPbft(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ViewChangeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewChangeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewChangeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QSet) > 0 {
		for iNdEx := len(m.QSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPbft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.PSet) > 0 {
		for iNdEx := len(m.PSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPbft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.HighIndex != 0 {
		i = encodeVarintPbft(dAtA, i, uint64(m.HighIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.LowIndex != 0 {
		i = encodeVarintPbft(dAtA, i, uint64(m.LowIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.NewView != 0 {
		i = encodeVarintPbft(dAtA, i, uint64(m.NewView))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ViewChangeAckMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewChangeAckMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewChangeAckMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Digest) > 0 {
		i -= len(m.Digest)
		copy(dAtA[i:], m.Digest)
		i = encodeVarintPbft(dAtA, i, uint64(len(m.Digest)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AckFor != 0 {
		i = encodeVarintPbft(dAtA, i, uint64(m.AckFor))
		i--
		dAtA[i] = 0x10
	}
	if m.NewView != 0 {
		i = encodeVarintPbft(dAtA, i, uint64(m.NewView))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewViewProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewViewProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewViewProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Digest) > 0 {
		i -= len(m.Digest)
		copy(dAtA[i:], m.Digest)
		i = encodeVarintPbft(dAtA, i, uint64(len(m.Digest)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AckFor != 0 {
		i = encodeVarintPbft(dAtA, i, uint64(m.AckFor))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *NewViewMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewViewMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewViewMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Instances) > 0 {
		for k := range m.Instances {
			v := m.Instances[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPbft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintPbft(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintPbft(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NvProof) > 0 {
		for iNdEx := len(m.NvProof) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NvProof[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPbft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.NewView != 0 {
		i = encodeVarintPbft(dAtA, i, uint64(m.NewView))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPbft(dAtA []byte, offset int, v uint64) int {
	offset -= sovPbft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PBFTMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *PBFTMessage_Agreement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Agreement != nil {
		l = m.Agreement.Size()
		n += 1 + l + sovPbft(uint64(l))
	}
	return n
}
func (m *PBFTMessage_ViewChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViewChange != nil {
		l = m.ViewChange.Size()
		n += 1 + l + sovPbft(uint64(l))
	}
	return n
}
func (m *PBFTMessage_ViewChangeAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViewChangeAck != nil {
		l = m.ViewChangeAck.Size()
		n += 1 + l + sovPbft(uint64(l))
	}
	return n
}
func (m *PBFTMessage_NewView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewView != nil {
		l = m.NewView.Size()
		n += 1 + l + sovPbft(uint64(l))
	}
	return n
}
func (m *InstanceState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovPbft(uint64(m.View))
	}
	if m.Index != 0 {
		n += 1 + sovPbft(uint64(m.Index))
	}
	if m.Status != 0 {
		n += 1 + sovPbft(uint64(m.Status))
	}
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovPbft(uint64(l))
	}
	l = len(m.CommandHash)
	if l > 0 {
		n += 1 + l + sovPbft(uint64(l))
	}
	return n
}

func (m *AgreementMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovPbft(uint64(m.View))
	}
	if m.Index != 0 {
		n += 1 + sovPbft(uint64(m.Index))
	}
	if m.Type != 0 {
		n += 1 + sovPbft(uint64(m.Type))
	}
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovPbft(uint64(l))
	}
	l = len(m.CommandHash)
	if l > 0 {
		n += 1 + l + sovPbft(uint64(l))
	}
	return n
}

func (m *ViewChangeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewView != 0 {
		n += 1 + sovPbft(uint64(m.NewView))
	}
	if m.LowIndex != 0 {
		n += 1 + sovPbft(uint64(m.LowIndex))
	}
	if m.HighIndex != 0 {
		n += 1 + sovPbft(uint64(m.HighIndex))
	}
	if len(m.PSet) > 0 {
		for _, e := range m.PSet {
			l = e.Size()
			n += 1 + l + sovPbft(uint64(l))
		}
	}
	if len(m.QSet) > 0 {
		for _, e := range m.QSet {
			l = e.Size()
			n += 1 + l + sovPbft(uint64(l))
		}
	}
	return n
}

func (m *ViewChangeAckMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewView != 0 {
		n += 1 + sovPbft(uint64(m.NewView))
	}
	if m.AckFor != 0 {
		n += 1 + sovPbft(uint64(m.AckFor))
	}
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovPbft(uint64(l))
	}
	return n
}

func (m *NewViewProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AckFor != 0 {
		n += 1 + sovPbft(uint64(m.AckFor))
	}
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovPbft(uint64(l))
	}
	return n
}

func (m *NewViewMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewView != 0 {
		n += 1 + sovPbft(uint64(m.NewView))
	}
	if len(m.NvProof) > 0 {
		for _, e := range m.NvProof {
			l = e.Size()
			n += 1 + l + sovPbft(uint64(l))
		}
	}
	if len(m.Instances) > 0 {
		for k, v := range m.Instances {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovPbft(uint64(k)) + 1 + l + sovPbft(uint64(l))
			n += mapEntrySize + 1 + sovPbft(uint64(mapEntrySize))
		}
	}
	return n
}

func sovPbft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPbft(x uint64) (n int) {
	return sovPbft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PBFTMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBFTMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBFTMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agreement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AgreementMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &PBFTMessage_Agreement{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewChangeMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &PBFTMessage_ViewChange{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewChangeAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewChangeAckMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &PBFTMessage_ViewChangeAck{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewView", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NewViewMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &PBFTMessage_NewView{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstanceState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstanceState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= View(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= InstanceState_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &commandpb.Command{}
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandHash = append(m.CommandHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CommandHash == nil {
				m.CommandHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgreementMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgreementMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgreementMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= View(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AgreementMessage_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &commandpb.Command{}
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandHash = append(m.CommandHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CommandHash == nil {
				m.CommandHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewChangeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewChangeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewChangeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewView", wireType)
			}
			m.NewView = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewView |= View(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowIndex", wireType)
			}
			m.LowIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowIndex |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighIndex", wireType)
			}
			m.HighIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighIndex |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PSet = append(m.PSet, InstanceState{})
			if err := m.PSet[len(m.PSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QSet = append(m.QSet, InstanceState{})
			if err := m.QSet[len(m.QSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewChangeAckMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewChangeAckMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewChangeAckMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewView", wireType)
			}
			m.NewView = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewView |= View(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckFor", wireType)
			}
			m.AckFor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckFor |= github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb.PeerID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = append(m.Digest[:0], dAtA[iNdEx:postIndex]...)
			if m.Digest == nil {
				m.Digest = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewViewProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewViewProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewViewProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckFor", wireType)
			}
			m.AckFor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckFor |= github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb.PeerID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = append(m.Digest[:0], dAtA[iNdEx:postIndex]...)
			if m.Digest == nil {
				m.Digest = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewViewMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewViewMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewViewMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewView", wireType)
			}
			m.NewView = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewView |= View(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NvProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NvProof = append(m.NvProof, NewViewProof{})
			if err := m.NvProof[len(m.NvProof)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Instances == nil {
				m.Instances = make(map[Index]InstanceState)
			}
			var mapkey uint64
			mapvalue := &InstanceState{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbft
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbft
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbft
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPbft
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPbft
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &InstanceState{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPbft(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPbft
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Instances[Index(mapkey)] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPbft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPbft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPbft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPbft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPbft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPbft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPbft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPbft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPbft = fmt.Errorf("proto: unexpected end of group")
)
