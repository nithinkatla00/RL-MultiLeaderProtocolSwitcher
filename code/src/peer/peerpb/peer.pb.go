// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: peer/peerpb/peer.proto

package peerpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Algorithm int32

const (
	Algorithm_PBFT   Algorithm = 0
	Algorithm_MirBFT Algorithm = 1
	Algorithm_Dispel Algorithm = 2
	Algorithm_DQPBFT Algorithm = 3
)

var Algorithm_name = map[int32]string{
	0: "PBFT",
	1: "MirBFT",
	2: "Dispel",
	3: "DQPBFT",
}

var Algorithm_value = map[string]int32{
	"PBFT":   0,
	"MirBFT": 1,
	"Dispel": 2,
	"DQPBFT": 3,
}

func (x Algorithm) String() string {
	return proto.EnumName(Algorithm_name, int32(x))
}

func (Algorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_42a8eca82a6f6f19, []int{0}
}

// Peer related proto messages.
type BasicPeerInfo struct {
	PodName     string `protobuf:"bytes,1,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	HostMachine string `protobuf:"bytes,2,opt,name=host_machine,json=hostMachine,proto3" json:"host_machine,omitempty"`
	PodIP       string `protobuf:"bytes,3,opt,name=pod_ip,json=podIp,proto3" json:"pod_ip,omitempty"`
	Region      string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
}

func (m *BasicPeerInfo) Reset()         { *m = BasicPeerInfo{} }
func (m *BasicPeerInfo) String() string { return proto.CompactTextString(m) }
func (*BasicPeerInfo) ProtoMessage()    {}
func (*BasicPeerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a8eca82a6f6f19, []int{0}
}
func (m *BasicPeerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BasicPeerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BasicPeerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BasicPeerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicPeerInfo.Merge(m, src)
}
func (m *BasicPeerInfo) XXX_Size() int {
	return m.Size()
}
func (m *BasicPeerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicPeerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BasicPeerInfo proto.InternalMessageInfo

func (m *BasicPeerInfo) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *BasicPeerInfo) GetHostMachine() string {
	if m != nil {
		return m.HostMachine
	}
	return ""
}

func (m *BasicPeerInfo) GetPodIP() string {
	if m != nil {
		return m.PodIP
	}
	return ""
}

func (m *BasicPeerInfo) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

type PeerInfo struct {
	BasicPeerInfo `protobuf:"bytes,1,opt,name=peer_info,json=peerInfo,proto3,embedded=peer_info" json:"peer_info"`
	PeerID        PeerID `protobuf:"varint,2,opt,name=peer_id,json=peerId,proto3,casttype=PeerID" json:"peer_id,omitempty"`
}

func (m *PeerInfo) Reset()         { *m = PeerInfo{} }
func (m *PeerInfo) String() string { return proto.CompactTextString(m) }
func (*PeerInfo) ProtoMessage()    {}
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a8eca82a6f6f19, []int{1}
}
func (m *PeerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerInfo.Merge(m, src)
}
func (m *PeerInfo) XXX_Size() int {
	return m.Size()
}
func (m *PeerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PeerInfo proto.InternalMessageInfo

func (m *PeerInfo) GetPeerID() PeerID {
	if m != nil {
		return m.PeerID
	}
	return 0
}

type MultiChainDuoBFTConfig struct {
	RCCMode          bool   `protobuf:"varint,1,opt,name=rcc_mode,json=rccMode,proto3" json:"rcc_mode,omitempty"`
	InstancesPerPeer uint32 `protobuf:"varint,2,opt,name=instances_per_peer,json=instancesPerPeer,proto3" json:"instances_per_peer,omitempty"`
	SkipSlowPath     bool   `protobuf:"varint,3,opt,name=skip_slow_path,json=skipSlowPath,proto3" json:"skip_slow_path,omitempty"`
}

func (m *MultiChainDuoBFTConfig) Reset()         { *m = MultiChainDuoBFTConfig{} }
func (m *MultiChainDuoBFTConfig) String() string { return proto.CompactTextString(m) }
func (*MultiChainDuoBFTConfig) ProtoMessage()    {}
func (*MultiChainDuoBFTConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a8eca82a6f6f19, []int{2}
}
func (m *MultiChainDuoBFTConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiChainDuoBFTConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiChainDuoBFTConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiChainDuoBFTConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiChainDuoBFTConfig.Merge(m, src)
}
func (m *MultiChainDuoBFTConfig) XXX_Size() int {
	return m.Size()
}
func (m *MultiChainDuoBFTConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiChainDuoBFTConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MultiChainDuoBFTConfig proto.InternalMessageInfo

func (m *MultiChainDuoBFTConfig) GetRCCMode() bool {
	if m != nil {
		return m.RCCMode
	}
	return false
}

func (m *MultiChainDuoBFTConfig) GetInstancesPerPeer() uint32 {
	if m != nil {
		return m.InstancesPerPeer
	}
	return 0
}

func (m *MultiChainDuoBFTConfig) GetSkipSlowPath() bool {
	if m != nil {
		return m.SkipSlowPath
	}
	return false
}

type PeerConfig struct {
	PeerDetails            []PeerInfo              `protobuf:"bytes,1,rep,name=peer_details,json=peerDetails,proto3" json:"peer_details"`
	ListenPort             int32                   `protobuf:"varint,2,opt,name=listen_port,json=listenPort,proto3" json:"listen_port,omitempty"`
	LogVerbose             bool                    `protobuf:"varint,3,opt,name=log_verbose,json=logVerbose,proto3" json:"log_verbose,omitempty"`
	Algorithm              Algorithm               `protobuf:"varint,4,opt,name=algorithm,proto3,enum=peerpb.Algorithm" json:"algorithm,omitempty"`
	MaxFailures            int32                   `protobuf:"varint,5,opt,name=max_failures,json=maxFailures,proto3" json:"max_failures,omitempty"`
	MaxFastFailures        int32                   `protobuf:"varint,6,opt,name=max_fast_failures,json=maxFastFailures,proto3" json:"max_fast_failures,omitempty"`
	LeaderID               PeerID                  `protobuf:"varint,7,opt,name=leader_id,json=leaderId,proto3,casttype=PeerID" json:"leader_id,omitempty"`
	SecretKeys             []string                `protobuf:"bytes,8,rep,name=secret_keys,json=secretKeys,proto3" json:"secret_keys,omitempty"`
	PublicKeys             []string                `protobuf:"bytes,9,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
	EnclavePath            string                  `protobuf:"bytes,10,opt,name=enclave_path,json=enclavePath,proto3" json:"enclave_path,omitempty"`
	EnclaveBatchSize       int32                   `protobuf:"varint,11,opt,name=enclave_batch_size,json=enclaveBatchSize,proto3" json:"enclave_batch_size,omitempty"`
	DqOBatchSize           uint32                  `protobuf:"varint,12,opt,name=dq_o_batch_size,json=dqOBatchSize,proto3" json:"dq_o_batch_size,omitempty"`
	DqOBatchTimeout        uint32                  `protobuf:"varint,22,opt,name=dq_o_batch_timeout,json=dqOBatchTimeout,proto3" json:"dq_o_batch_timeout,omitempty"`
	Workers                map[string]uint32       `protobuf:"bytes,14,rep,name=workers,proto3" json:"workers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	WorkersQueueSizes      map[string]uint32       `protobuf:"bytes,18,rep,name=workers_queue_sizes,json=workersQueueSizes,proto3" json:"workers_queue_sizes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CmdBatchSize           uint32                  `protobuf:"varint,15,opt,name=cmd_batch_size,json=cmdBatchSize,proto3" json:"cmd_batch_size,omitempty"`
	CmdBatchTimeout        uint32                  `protobuf:"varint,16,opt,name=cmd_batch_timeout,json=cmdBatchTimeout,proto3" json:"cmd_batch_timeout,omitempty"`
	ReqBufThreshold        int32                   `protobuf:"varint,17,opt,name=req_buf_threshold,json=reqBufThreshold,proto3" json:"req_buf_threshold,omitempty"`
	ThreshsignFastLagrange bool                    `protobuf:"varint,19,opt,name=threshsign_fast_lagrange,json=threshsignFastLagrange,proto3" json:"threshsign_fast_lagrange,omitempty"`
	RccAlgorithm           Algorithm               `protobuf:"varint,20,opt,name=rcc_algorithm,json=rccAlgorithm,proto3,enum=peerpb.Algorithm" json:"rcc_algorithm,omitempty"`
	DispelWaitForAllRb     bool                    `protobuf:"varint,21,opt,name=dispel_wait_for_all_rb,json=dispelWaitForAllRb,proto3" json:"dispel_wait_for_all_rb,omitempty"`
	MultiChainDuoBFT       *MultiChainDuoBFTConfig `protobuf:"bytes,23,opt,name=multichainduobft,proto3" json:"multichainduobft,omitempty"`
}

func (m *PeerConfig) Reset()         { *m = PeerConfig{} }
func (m *PeerConfig) String() string { return proto.CompactTextString(m) }
func (*PeerConfig) ProtoMessage()    {}
func (*PeerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a8eca82a6f6f19, []int{3}
}
func (m *PeerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerConfig.Merge(m, src)
}
func (m *PeerConfig) XXX_Size() int {
	return m.Size()
}
func (m *PeerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PeerConfig proto.InternalMessageInfo

func (m *PeerConfig) GetPeerDetails() []PeerInfo {
	if m != nil {
		return m.PeerDetails
	}
	return nil
}

func (m *PeerConfig) GetListenPort() int32 {
	if m != nil {
		return m.ListenPort
	}
	return 0
}

func (m *PeerConfig) GetLogVerbose() bool {
	if m != nil {
		return m.LogVerbose
	}
	return false
}

func (m *PeerConfig) GetAlgorithm() Algorithm {
	if m != nil {
		return m.Algorithm
	}
	return Algorithm_PBFT
}

func (m *PeerConfig) GetMaxFailures() int32 {
	if m != nil {
		return m.MaxFailures
	}
	return 0
}

func (m *PeerConfig) GetMaxFastFailures() int32 {
	if m != nil {
		return m.MaxFastFailures
	}
	return 0
}

func (m *PeerConfig) GetLeaderID() PeerID {
	if m != nil {
		return m.LeaderID
	}
	return 0
}

func (m *PeerConfig) GetSecretKeys() []string {
	if m != nil {
		return m.SecretKeys
	}
	return nil
}

func (m *PeerConfig) GetPublicKeys() []string {
	if m != nil {
		return m.PublicKeys
	}
	return nil
}

func (m *PeerConfig) GetEnclavePath() string {
	if m != nil {
		return m.EnclavePath
	}
	return ""
}

func (m *PeerConfig) GetEnclaveBatchSize() int32 {
	if m != nil {
		return m.EnclaveBatchSize
	}
	return 0
}

func (m *PeerConfig) GetDqOBatchSize() uint32 {
	if m != nil {
		return m.DqOBatchSize
	}
	return 0
}

func (m *PeerConfig) GetDqOBatchTimeout() uint32 {
	if m != nil {
		return m.DqOBatchTimeout
	}
	return 0
}

func (m *PeerConfig) GetWorkers() map[string]uint32 {
	if m != nil {
		return m.Workers
	}
	return nil
}

func (m *PeerConfig) GetWorkersQueueSizes() map[string]uint32 {
	if m != nil {
		return m.WorkersQueueSizes
	}
	return nil
}

func (m *PeerConfig) GetCmdBatchSize() uint32 {
	if m != nil {
		return m.CmdBatchSize
	}
	return 0
}

func (m *PeerConfig) GetCmdBatchTimeout() uint32 {
	if m != nil {
		return m.CmdBatchTimeout
	}
	return 0
}

func (m *PeerConfig) GetReqBufThreshold() int32 {
	if m != nil {
		return m.ReqBufThreshold
	}
	return 0
}

func (m *PeerConfig) GetThreshsignFastLagrange() bool {
	if m != nil {
		return m.ThreshsignFastLagrange
	}
	return false
}

func (m *PeerConfig) GetRccAlgorithm() Algorithm {
	if m != nil {
		return m.RccAlgorithm
	}
	return Algorithm_PBFT
}

func (m *PeerConfig) GetDispelWaitForAllRb() bool {
	if m != nil {
		return m.DispelWaitForAllRb
	}
	return false
}

func (m *PeerConfig) GetMultiChainDuoBFT() *MultiChainDuoBFTConfig {
	if m != nil {
		return m.MultiChainDuoBFT
	}
	return nil
}

type Message struct {
	From        PeerID            `protobuf:"varint,1,opt,name=from,proto3,casttype=PeerID" json:"from,omitempty"`
	To          PeerID            `protobuf:"varint,2,opt,name=to,proto3,casttype=PeerID" json:"to,omitempty"`
	Content     []byte            `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Certificate []byte            `protobuf:"bytes,4,opt,name=certificate,proto3" json:"certificate,omitempty"`
	TraceInfo   map[string]string `protobuf:"bytes,5,rep,name=trace_info,json=traceInfo,proto3" json:"trace_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a8eca82a6f6f19, []int{4}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetFrom() PeerID {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *Message) GetTo() PeerID {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *Message) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Message) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (m *Message) GetTraceInfo() map[string]string {
	if m != nil {
		return m.TraceInfo
	}
	return nil
}

func init() {
	proto.RegisterEnum("peerpb.Algorithm", Algorithm_name, Algorithm_value)
	proto.RegisterType((*BasicPeerInfo)(nil), "peerpb.BasicPeerInfo")
	proto.RegisterType((*PeerInfo)(nil), "peerpb.PeerInfo")
	proto.RegisterType((*MultiChainDuoBFTConfig)(nil), "peerpb.MultiChainDuoBFTConfig")
	proto.RegisterType((*PeerConfig)(nil), "peerpb.PeerConfig")
	proto.RegisterMapType((map[string]uint32)(nil), "peerpb.PeerConfig.WorkersEntry")
	proto.RegisterMapType((map[string]uint32)(nil), "peerpb.PeerConfig.WorkersQueueSizesEntry")
	proto.RegisterType((*Message)(nil), "peerpb.Message")
	proto.RegisterMapType((map[string]string)(nil), "peerpb.Message.TraceInfoEntry")
}

func init() { proto.RegisterFile("peer/peerpb/peer.proto", fileDescriptor_42a8eca82a6f6f19) }

var fileDescriptor_42a8eca82a6f6f19 = []byte{
	// 1113 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x4f, 0x6f, 0xdb, 0xb6,
	0x1b, 0x8e, 0x12, 0xff, 0x7d, 0xed, 0x26, 0x36, 0x9b, 0xfa, 0xa7, 0x5f, 0x0e, 0x76, 0x1a, 0x6c,
	0x43, 0x97, 0xad, 0x4e, 0x91, 0x02, 0x43, 0x5b, 0x74, 0x87, 0x3a, 0x59, 0x80, 0x60, 0xcd, 0xe6,
	0xaa, 0xc1, 0x8a, 0x0d, 0x18, 0x34, 0x9a, 0xa2, 0x25, 0x22, 0x92, 0xa8, 0x50, 0x54, 0xdc, 0xf4,
	0x0b, 0xec, 0xba, 0xc3, 0xbe, 0xd1, 0x2e, 0x3d, 0xe6, 0xb8, 0x93, 0x31, 0x38, 0xdf, 0x62, 0x87,
	0x61, 0x20, 0x29, 0xd9, 0x4e, 0xd7, 0x62, 0xd8, 0xc5, 0x7e, 0xf9, 0xbc, 0x0f, 0xc9, 0xf7, 0xcf,
	0xa3, 0x57, 0x82, 0x4e, 0x42, 0xa9, 0xd8, 0x53, 0x3f, 0xc9, 0x48, 0xff, 0xf5, 0x13, 0xc1, 0x25,
	0x47, 0x15, 0x03, 0x6d, 0x6d, 0xfa, 0xdc, 0xe7, 0x1a, 0xda, 0x53, 0x96, 0xf1, 0xee, 0xfc, 0x6c,
	0xc1, 0xad, 0x01, 0x4e, 0x19, 0x19, 0x52, 0x2a, 0x8e, 0xe3, 0x31, 0x47, 0xff, 0x87, 0x5a, 0xc2,
	0x3d, 0x37, 0xc6, 0x11, 0xb5, 0xad, 0x6d, 0xeb, 0x5e, 0xdd, 0xa9, 0x26, 0xdc, 0xfb, 0x06, 0x47,
	0x14, 0xdd, 0x85, 0x66, 0xc0, 0x53, 0xe9, 0x46, 0x98, 0x04, 0x2c, 0xa6, 0xf6, 0xaa, 0x76, 0x37,
	0x14, 0x76, 0x62, 0x20, 0xb4, 0x0d, 0x15, 0xb5, 0x9b, 0x25, 0xf6, 0x9a, 0x72, 0x0e, 0xea, 0xb3,
	0x69, 0xaf, 0x3c, 0xe4, 0xde, 0xf1, 0xd0, 0x29, 0x27, 0xdc, 0x3b, 0x4e, 0x50, 0x07, 0x2a, 0x82,
	0xfa, 0x8c, 0xc7, 0x76, 0x49, 0x6f, 0xcf, 0x57, 0x3b, 0x13, 0xa8, 0xcd, 0x63, 0x78, 0x0a, 0x75,
	0x15, 0xb5, 0xcb, 0xe2, 0x31, 0xd7, 0x41, 0x34, 0xf6, 0xef, 0xf4, 0x4d, 0x1e, 0xfd, 0x1b, 0xd1,
	0x0e, 0x6a, 0x6f, 0xa7, 0xbd, 0x95, 0xab, 0x69, 0xcf, 0x72, 0x6a, 0x49, 0xb1, 0xfb, 0x3e, 0x54,
	0xcd, 0x6e, 0x4f, 0x47, 0x58, 0x1a, 0x6c, 0xce, 0xa6, 0xbd, 0x8a, 0xde, 0x72, 0xf8, 0xe7, 0xdc,
	0x72, 0x74, 0x61, 0x8e, 0xbd, 0x9d, 0x5f, 0x2d, 0xe8, 0x9c, 0x64, 0xa1, 0x64, 0x07, 0x01, 0x66,
	0xf1, 0x61, 0xc6, 0x07, 0x47, 0xa7, 0x07, 0x3c, 0x1e, 0x33, 0x1f, 0x7d, 0x02, 0x35, 0x41, 0x88,
	0x1b, 0x71, 0xcf, 0xd4, 0xa2, 0x36, 0x68, 0xcc, 0xa6, 0xbd, 0xaa, 0x73, 0x70, 0x70, 0xc2, 0x3d,
	0xea, 0x54, 0x05, 0x21, 0xca, 0x40, 0x9f, 0x03, 0x62, 0x71, 0x2a, 0x71, 0x4c, 0x68, 0xea, 0x26,
	0x54, 0xb8, 0xea, 0x68, 0x7d, 0xf9, 0x2d, 0xa7, 0x35, 0xf7, 0x0c, 0xa9, 0x50, 0x57, 0xa3, 0x8f,
	0x60, 0x3d, 0x3d, 0x63, 0x89, 0x9b, 0x86, 0x7c, 0xe2, 0x26, 0x58, 0x06, 0xba, 0x56, 0x35, 0xa7,
	0xa9, 0xd0, 0x97, 0x21, 0x9f, 0x0c, 0xb1, 0x0c, 0x76, 0x7e, 0xab, 0x03, 0x28, 0x7a, 0x1e, 0xca,
	0x63, 0x68, 0xea, 0xa4, 0x3c, 0x2a, 0x31, 0x0b, 0x53, 0xdb, 0xda, 0x5e, 0xbb, 0xd7, 0xd8, 0x6f,
	0x15, 0x55, 0x99, 0x17, 0xa4, 0xa4, 0x0a, 0xe2, 0x34, 0x14, 0x7c, 0x68, 0xa8, 0xa8, 0x07, 0x8d,
	0x90, 0xa5, 0x92, 0xc6, 0x6e, 0xc2, 0x85, 0xd4, 0x61, 0x95, 0x1d, 0x30, 0xd0, 0x90, 0x0b, 0xa9,
	0x09, 0xdc, 0x77, 0x2f, 0xa8, 0x18, 0xf1, 0x94, 0xe6, 0xd1, 0x40, 0xc8, 0xfd, 0xef, 0x0c, 0x82,
	0xf6, 0xa0, 0x8e, 0x43, 0x9f, 0x0b, 0x26, 0x83, 0x48, 0xb7, 0x6d, 0x7d, 0xbf, 0x5d, 0xdc, 0xfc,
	0xac, 0x70, 0x38, 0x0b, 0x8e, 0x52, 0x4a, 0x84, 0x5f, 0xbb, 0x63, 0xcc, 0xc2, 0x4c, 0xd0, 0xd4,
	0x2e, 0xeb, 0x3b, 0x1b, 0x11, 0x7e, 0x7d, 0x94, 0x43, 0x68, 0x17, 0xda, 0x86, 0x92, 0xca, 0x05,
	0xaf, 0xa2, 0x79, 0x1b, 0x9a, 0x97, 0xca, 0x39, 0xf7, 0x21, 0xd4, 0x43, 0x8a, 0x3d, 0xd3, 0xd3,
	0xaa, 0xee, 0x69, 0x67, 0x36, 0xed, 0xd5, 0x9e, 0x6b, 0xf0, 0x46, 0x57, 0x6b, 0x86, 0x78, 0xec,
	0xa9, 0xac, 0x52, 0x4a, 0x04, 0x95, 0xee, 0x19, 0xbd, 0x4c, 0xed, 0xda, 0xf6, 0xda, 0xbd, 0xba,
	0x03, 0x06, 0xfa, 0x9a, 0x5e, 0xea, 0xba, 0x24, 0xd9, 0x28, 0x64, 0xc4, 0x10, 0xea, 0x86, 0x60,
	0x20, 0x4d, 0xb8, 0x0b, 0x4d, 0x1a, 0x93, 0x10, 0x5f, 0x50, 0xd3, 0x26, 0x30, 0x7a, 0xcf, 0x31,
	0xd5, 0x25, 0xd5, 0xf9, 0x82, 0x32, 0xc2, 0x92, 0x04, 0x6e, 0xca, 0xde, 0x50, 0xbb, 0xa1, 0xd3,
	0x68, 0xe5, 0x9e, 0x81, 0x72, 0xbc, 0x64, 0x6f, 0x28, 0xfa, 0x18, 0x36, 0xbc, 0x73, 0x97, 0x2f,
	0x53, 0x9b, 0x5a, 0x24, 0x4d, 0xef, 0xfc, 0xdb, 0x05, 0xed, 0x33, 0x40, 0x4b, 0x34, 0xc9, 0x22,
	0xca, 0x33, 0x69, 0x77, 0x34, 0x73, 0xa3, 0x60, 0x9e, 0x1a, 0x18, 0x3d, 0x86, 0xea, 0x84, 0x8b,
	0x33, 0x2a, 0x52, 0x7b, 0x5d, 0x6b, 0xa2, 0xb7, 0xac, 0x09, 0xa3, 0x9e, 0xfe, 0x2b, 0xc3, 0xf8,
	0x2a, 0x96, 0xe2, 0xd2, 0x29, 0xf8, 0xe8, 0x7b, 0xb8, 0x9d, 0x9b, 0xee, 0x79, 0x46, 0x33, 0xaa,
	0x23, 0x4a, 0x6d, 0xa4, 0x8f, 0xf9, 0xf4, 0xc3, 0xc7, 0xbc, 0x50, 0x64, 0x15, 0x69, 0x7e, 0x60,
	0x7b, 0xf2, 0x2e, 0xae, 0x34, 0x4e, 0x22, 0x6f, 0x39, 0xd1, 0x0d, 0x93, 0x28, 0x89, 0xbc, 0x45,
	0xa2, 0xbb, 0xd0, 0x5e, 0xb0, 0x8a, 0x3c, 0x5b, 0x26, 0xcf, 0x82, 0x58, 0xe4, 0xb9, 0x0b, 0x6d,
	0x41, 0xcf, 0xdd, 0x51, 0x36, 0x76, 0x65, 0x20, 0x68, 0x1a, 0xf0, 0xd0, 0xb3, 0xdb, 0x46, 0x2f,
	0x82, 0x9e, 0x0f, 0xb2, 0xf1, 0x69, 0x01, 0xa3, 0x47, 0x60, 0x1b, 0x4e, 0xca, 0xfc, 0xd8, 0x48,
	0x2c, 0xc4, 0xbe, 0xc0, 0xb1, 0x4f, 0xed, 0xdb, 0x5a, 0xdd, 0x9d, 0x85, 0x5f, 0x29, 0xed, 0x79,
	0xee, 0x45, 0x5f, 0xc0, 0x2d, 0xf5, 0xc4, 0x2f, 0xd4, 0xbe, 0xf9, 0x21, 0xb5, 0x37, 0x05, 0x21,
	0xf3, 0x15, 0xda, 0x87, 0x8e, 0xc7, 0xd2, 0x84, 0x86, 0xee, 0x04, 0x33, 0xe9, 0x8e, 0xb9, 0x70,
	0x71, 0x18, 0xba, 0x62, 0x64, 0xdf, 0xd1, 0xf7, 0x21, 0xe3, 0x7d, 0x85, 0x99, 0x3c, 0xe2, 0xe2,
	0x59, 0x18, 0x3a, 0x23, 0xf4, 0x13, 0xb4, 0x22, 0x35, 0x77, 0x88, 0x9a, 0x3b, 0x5e, 0xc6, 0x47,
	0x63, 0x69, 0xff, 0x4f, 0x0f, 0xbb, 0x6e, 0x71, 0xdd, 0xfb, 0xe7, 0x92, 0x1e, 0x68, 0xad, 0x77,
	0x7d, 0xce, 0x3f, 0x4e, 0xdb, 0x7a, 0x02, 0xcd, 0xe5, 0xce, 0xa3, 0x16, 0xac, 0x9d, 0xd1, 0xcb,
	0x7c, 0xac, 0x2b, 0x13, 0x6d, 0x42, 0xf9, 0x02, 0x87, 0x19, 0xcd, 0x87, 0x95, 0x59, 0x3c, 0x59,
	0x7d, 0x64, 0x6d, 0x1d, 0x42, 0xe7, 0xfd, 0xed, 0xfe, 0x2f, 0xa7, 0xec, 0xfc, 0x65, 0x41, 0xf5,
	0x84, 0xa6, 0x29, 0xf6, 0x29, 0xea, 0x42, 0x69, 0x2c, 0x78, 0xa4, 0x37, 0x96, 0x06, 0xb0, 0xf4,
	0xd0, 0x6a, 0x1c, 0x6d, 0xc1, 0xaa, 0xe4, 0xf9, 0xc8, 0x5e, 0xf6, 0xae, 0x4a, 0x8e, 0x6c, 0xa8,
	0x12, 0x1e, 0x4b, 0x1a, 0x4b, 0x3d, 0x9e, 0x9a, 0x4e, 0xb1, 0x44, 0xdb, 0xd0, 0x20, 0x54, 0x48,
	0x36, 0x66, 0x04, 0x4b, 0xaa, 0xa7, 0x53, 0xd3, 0x59, 0x86, 0xd0, 0x97, 0x00, 0x52, 0x60, 0x42,
	0xcd, 0xeb, 0xa4, 0xac, 0xd5, 0xbd, 0xa8, 0xb0, 0x09, 0xae, 0x7f, 0xaa, 0x18, 0x6a, 0x82, 0x1a,
	0x49, 0xd7, 0x65, 0xb1, 0xde, 0x7a, 0x0a, 0xeb, 0x37, 0x9d, 0xff, 0x56, 0x80, 0xfa, 0x52, 0x01,
	0x76, 0x1f, 0x43, 0x7d, 0xa1, 0x92, 0x1a, 0x94, 0x86, 0x83, 0xa3, 0xd3, 0xd6, 0x0a, 0x02, 0xa8,
	0x9c, 0x30, 0xa1, 0x6c, 0x4b, 0xd9, 0x87, 0x5a, 0x1d, 0xad, 0x55, 0x6d, 0xbf, 0xd0, 0x9c, 0xb5,
	0xc1, 0x8f, 0x6f, 0x67, 0x5d, 0xeb, 0x6a, 0xd6, 0xb5, 0xfe, 0x98, 0x75, 0xad, 0x5f, 0xae, 0xbb,
	0x2b, 0x57, 0xd7, 0xdd, 0x95, 0xdf, 0xaf, 0xbb, 0x2b, 0x3f, 0x1c, 0xf8, 0x4c, 0x06, 0xd9, 0xa8,
	0x4f, 0x78, 0xb4, 0x17, 0x33, 0x19, 0xb0, 0xf8, 0x0c, 0xcb, 0x10, 0x3f, 0x78, 0xb0, 0xe7, 0x3c,
	0xbf, 0xaf, 0x75, 0x61, 0x26, 0xe3, 0x50, 0xbd, 0xe3, 0x09, 0x0f, 0x5f, 0x4e, 0x98, 0x24, 0x41,
	0xfe, 0x79, 0x90, 0x7f, 0x23, 0x8c, 0x2a, 0xfa, 0x0b, 0xe0, 0xe1, 0xdf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xaa, 0x82, 0xcb, 0x6c, 0x39, 0x08, 0x00, 0x00,
}

func (m *BasicPeerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BasicPeerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BasicPeerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintPeer(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PodIP) > 0 {
		i -= len(m.PodIP)
		copy(dAtA[i:], m.PodIP)
		i = encodeVarintPeer(dAtA, i, uint64(len(m.PodIP)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.HostMachine) > 0 {
		i -= len(m.HostMachine)
		copy(dAtA[i:], m.HostMachine)
		i = encodeVarintPeer(dAtA, i, uint64(len(m.HostMachine)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PodName) > 0 {
		i -= len(m.PodName)
		copy(dAtA[i:], m.PodName)
		i = encodeVarintPeer(dAtA, i, uint64(len(m.PodName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PeerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PeerID != 0 {
		i = encodeVarintPeer(dAtA, i, uint64(m.PeerID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.BasicPeerInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPeer(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MultiChainDuoBFTConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiChainDuoBFTConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiChainDuoBFTConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SkipSlowPath {
		i--
		if m.SkipSlowPath {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.InstancesPerPeer != 0 {
		i = encodeVarintPeer(dAtA, i, uint64(m.InstancesPerPeer))
		i--
		dAtA[i] = 0x10
	}
	if m.RCCMode {
		i--
		if m.RCCMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PeerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MultiChainDuoBFT != nil {
		{
			size, err := m.MultiChainDuoBFT.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPeer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.DqOBatchTimeout != 0 {
		i = encodeVarintPeer(dAtA, i, uint64(m.DqOBatchTimeout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.DispelWaitForAllRb {
		i--
		if m.DispelWaitForAllRb {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.RccAlgorithm != 0 {
		i = encodeVarintPeer(dAtA, i, uint64(m.RccAlgorithm))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.ThreshsignFastLagrange {
		i--
		if m.ThreshsignFastLagrange {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.WorkersQueueSizes) > 0 {
		for k := range m.WorkersQueueSizes {
			v := m.WorkersQueueSizes[k]
			baseI := i
			i = encodeVarintPeer(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPeer(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPeer(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if m.ReqBufThreshold != 0 {
		i = encodeVarintPeer(dAtA, i, uint64(m.ReqBufThreshold))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CmdBatchTimeout != 0 {
		i = encodeVarintPeer(dAtA, i, uint64(m.CmdBatchTimeout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.CmdBatchSize != 0 {
		i = encodeVarintPeer(dAtA, i, uint64(m.CmdBatchSize))
		i--
		dAtA[i] = 0x78
	}
	if len(m.Workers) > 0 {
		for k := range m.Workers {
			v := m.Workers[k]
			baseI := i
			i = encodeVarintPeer(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPeer(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPeer(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x72
		}
	}
	if m.DqOBatchSize != 0 {
		i = encodeVarintPeer(dAtA, i, uint64(m.DqOBatchSize))
		i--
		dAtA[i] = 0x60
	}
	if m.EnclaveBatchSize != 0 {
		i = encodeVarintPeer(dAtA, i, uint64(m.EnclaveBatchSize))
		i--
		dAtA[i] = 0x58
	}
	if len(m.EnclavePath) > 0 {
		i -= len(m.EnclavePath)
		copy(dAtA[i:], m.EnclavePath)
		i = encodeVarintPeer(dAtA, i, uint64(len(m.EnclavePath)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PublicKeys) > 0 {
		for iNdEx := len(m.PublicKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PublicKeys[iNdEx])
			copy(dAtA[i:], m.PublicKeys[iNdEx])
			i = encodeVarintPeer(dAtA, i, uint64(len(m.PublicKeys[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.SecretKeys) > 0 {
		for iNdEx := len(m.SecretKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SecretKeys[iNdEx])
			copy(dAtA[i:], m.SecretKeys[iNdEx])
			i = encodeVarintPeer(dAtA, i, uint64(len(m.SecretKeys[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.LeaderID != 0 {
		i = encodeVarintPeer(dAtA, i, uint64(m.LeaderID))
		i--
		dAtA[i] = 0x38
	}
	if m.MaxFastFailures != 0 {
		i = encodeVarintPeer(dAtA, i, uint64(m.MaxFastFailures))
		i--
		dAtA[i] = 0x30
	}
	if m.MaxFailures != 0 {
		i = encodeVarintPeer(dAtA, i, uint64(m.MaxFailures))
		i--
		dAtA[i] = 0x28
	}
	if m.Algorithm != 0 {
		i = encodeVarintPeer(dAtA, i, uint64(m.Algorithm))
		i--
		dAtA[i] = 0x20
	}
	if m.LogVerbose {
		i--
		if m.LogVerbose {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ListenPort != 0 {
		i = encodeVarintPeer(dAtA, i, uint64(m.ListenPort))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PeerDetails) > 0 {
		for iNdEx := len(m.PeerDetails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PeerDetails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPeer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TraceInfo) > 0 {
		for k := range m.TraceInfo {
			v := m.TraceInfo[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPeer(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPeer(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPeer(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Certificate) > 0 {
		i -= len(m.Certificate)
		copy(dAtA[i:], m.Certificate)
		i = encodeVarintPeer(dAtA, i, uint64(len(m.Certificate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintPeer(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if m.To != 0 {
		i = encodeVarintPeer(dAtA, i, uint64(m.To))
		i--
		dAtA[i] = 0x10
	}
	if m.From != 0 {
		i = encodeVarintPeer(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPeer(dAtA []byte, offset int, v uint64) int {
	offset -= sovPeer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BasicPeerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PodName)
	if l > 0 {
		n += 1 + l + sovPeer(uint64(l))
	}
	l = len(m.HostMachine)
	if l > 0 {
		n += 1 + l + sovPeer(uint64(l))
	}
	l = len(m.PodIP)
	if l > 0 {
		n += 1 + l + sovPeer(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovPeer(uint64(l))
	}
	return n
}

func (m *PeerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BasicPeerInfo.Size()
	n += 1 + l + sovPeer(uint64(l))
	if m.PeerID != 0 {
		n += 1 + sovPeer(uint64(m.PeerID))
	}
	return n
}

func (m *MultiChainDuoBFTConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RCCMode {
		n += 2
	}
	if m.InstancesPerPeer != 0 {
		n += 1 + sovPeer(uint64(m.InstancesPerPeer))
	}
	if m.SkipSlowPath {
		n += 2
	}
	return n
}

func (m *PeerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PeerDetails) > 0 {
		for _, e := range m.PeerDetails {
			l = e.Size()
			n += 1 + l + sovPeer(uint64(l))
		}
	}
	if m.ListenPort != 0 {
		n += 1 + sovPeer(uint64(m.ListenPort))
	}
	if m.LogVerbose {
		n += 2
	}
	if m.Algorithm != 0 {
		n += 1 + sovPeer(uint64(m.Algorithm))
	}
	if m.MaxFailures != 0 {
		n += 1 + sovPeer(uint64(m.MaxFailures))
	}
	if m.MaxFastFailures != 0 {
		n += 1 + sovPeer(uint64(m.MaxFastFailures))
	}
	if m.LeaderID != 0 {
		n += 1 + sovPeer(uint64(m.LeaderID))
	}
	if len(m.SecretKeys) > 0 {
		for _, s := range m.SecretKeys {
			l = len(s)
			n += 1 + l + sovPeer(uint64(l))
		}
	}
	if len(m.PublicKeys) > 0 {
		for _, s := range m.PublicKeys {
			l = len(s)
			n += 1 + l + sovPeer(uint64(l))
		}
	}
	l = len(m.EnclavePath)
	if l > 0 {
		n += 1 + l + sovPeer(uint64(l))
	}
	if m.EnclaveBatchSize != 0 {
		n += 1 + sovPeer(uint64(m.EnclaveBatchSize))
	}
	if m.DqOBatchSize != 0 {
		n += 1 + sovPeer(uint64(m.DqOBatchSize))
	}
	if len(m.Workers) > 0 {
		for k, v := range m.Workers {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPeer(uint64(len(k))) + 1 + sovPeer(uint64(v))
			n += mapEntrySize + 1 + sovPeer(uint64(mapEntrySize))
		}
	}
	if m.CmdBatchSize != 0 {
		n += 1 + sovPeer(uint64(m.CmdBatchSize))
	}
	if m.CmdBatchTimeout != 0 {
		n += 2 + sovPeer(uint64(m.CmdBatchTimeout))
	}
	if m.ReqBufThreshold != 0 {
		n += 2 + sovPeer(uint64(m.ReqBufThreshold))
	}
	if len(m.WorkersQueueSizes) > 0 {
		for k, v := range m.WorkersQueueSizes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPeer(uint64(len(k))) + 1 + sovPeer(uint64(v))
			n += mapEntrySize + 2 + sovPeer(uint64(mapEntrySize))
		}
	}
	if m.ThreshsignFastLagrange {
		n += 3
	}
	if m.RccAlgorithm != 0 {
		n += 2 + sovPeer(uint64(m.RccAlgorithm))
	}
	if m.DispelWaitForAllRb {
		n += 3
	}
	if m.DqOBatchTimeout != 0 {
		n += 2 + sovPeer(uint64(m.DqOBatchTimeout))
	}
	if m.MultiChainDuoBFT != nil {
		l = m.MultiChainDuoBFT.Size()
		n += 2 + l + sovPeer(uint64(l))
	}
	return n
}

func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != 0 {
		n += 1 + sovPeer(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovPeer(uint64(m.To))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovPeer(uint64(l))
	}
	l = len(m.Certificate)
	if l > 0 {
		n += 1 + l + sovPeer(uint64(l))
	}
	if len(m.TraceInfo) > 0 {
		for k, v := range m.TraceInfo {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPeer(uint64(len(k))) + 1 + len(v) + sovPeer(uint64(len(v)))
			n += mapEntrySize + 1 + sovPeer(uint64(mapEntrySize))
		}
	}
	return n
}

func sovPeer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPeer(x uint64) (n int) {
	return sovPeer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BasicPeerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BasicPeerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BasicPeerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostMachine", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostMachine = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPeer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPeer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasicPeerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BasicPeerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= PeerID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPeer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPeer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiChainDuoBFTConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiChainDuoBFTConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiChainDuoBFTConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RCCMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RCCMode = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstancesPerPeer", wireType)
			}
			m.InstancesPerPeer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstancesPerPeer |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipSlowPath", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipSlowPath = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPeer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPeer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerDetails = append(m.PeerDetails, PeerInfo{})
			if err := m.PeerDetails[len(m.PeerDetails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenPort", wireType)
			}
			m.ListenPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ListenPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogVerbose", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogVerbose = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			m.Algorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algorithm |= Algorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFailures", wireType)
			}
			m.MaxFailures = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxFailures |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFastFailures", wireType)
			}
			m.MaxFastFailures = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxFastFailures |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderID", wireType)
			}
			m.LeaderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderID |= PeerID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretKeys = append(m.SecretKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKeys = append(m.PublicKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnclavePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnclavePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnclaveBatchSize", wireType)
			}
			m.EnclaveBatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnclaveBatchSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DqOBatchSize", wireType)
			}
			m.DqOBatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DqOBatchSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Workers == nil {
				m.Workers = make(map[string]uint32)
			}
			var mapkey string
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPeer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPeer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPeer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPeer
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPeer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPeer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPeer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Workers[mapkey] = mapvalue
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdBatchSize", wireType)
			}
			m.CmdBatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdBatchSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdBatchTimeout", wireType)
			}
			m.CmdBatchTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdBatchTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqBufThreshold", wireType)
			}
			m.ReqBufThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqBufThreshold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkersQueueSizes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkersQueueSizes == nil {
				m.WorkersQueueSizes = make(map[string]uint32)
			}
			var mapkey string
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPeer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPeer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPeer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPeer
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPeer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPeer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPeer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.WorkersQueueSizes[mapkey] = mapvalue
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreshsignFastLagrange", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThreshsignFastLagrange = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RccAlgorithm", wireType)
			}
			m.RccAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RccAlgorithm |= Algorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispelWaitForAllRb", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DispelWaitForAllRb = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DqOBatchTimeout", wireType)
			}
			m.DqOBatchTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DqOBatchTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiChainDuoBFT", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MultiChainDuoBFT == nil {
				m.MultiChainDuoBFT = &MultiChainDuoBFTConfig{}
			}
			if err := m.MultiChainDuoBFT.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPeer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPeer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= PeerID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= PeerID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificate = append(m.Certificate[:0], dAtA[iNdEx:postIndex]...)
			if m.Certificate == nil {
				m.Certificate = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TraceInfo == nil {
				m.TraceInfo = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPeer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPeer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPeer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPeer
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPeer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPeer
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPeer
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPeer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPeer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TraceInfo[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPeer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPeer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPeer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPeer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPeer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPeer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPeer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPeer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPeer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPeer = fmt.Errorf("proto: unexpected end of group")
)
