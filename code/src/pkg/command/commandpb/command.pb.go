// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/command/commandpb/command.proto

package commandpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb "github.com/nithinkatla00/RL-MultiLeaderProtocolSwitcher/peer/peerpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type KVOp struct {
	Key   Key    `protobuf:"bytes,1,opt,name=key,proto3,casttype=Key" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Read  bool   `protobuf:"varint,3,opt,name=read,proto3" json:"read,omitempty"`
}

func (m *KVOp) Reset()         { *m = KVOp{} }
func (m *KVOp) String() string { return proto.CompactTextString(m) }
func (*KVOp) ProtoMessage()    {}
func (*KVOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e32f9a2e009fbbec, []int{0}
}
func (m *KVOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KVOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KVOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KVOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVOp.Merge(m, src)
}
func (m *KVOp) XXX_Size() int {
	return m.Size()
}
func (m *KVOp) XXX_DiscardUnknown() {
	xxx_messageInfo_KVOp.DiscardUnknown(m)
}

var xxx_messageInfo_KVOp proto.InternalMessageInfo

func (m *KVOp) GetKey() Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KVOp) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *KVOp) GetRead() bool {
	if m != nil {
		return m.Read
	}
	return false
}

type KVOpResult struct {
	Key          Key    `protobuf:"bytes,1,opt,name=key,proto3,casttype=Key" json:"key,omitempty"`
	Value        []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	WriteSuccess bool   `protobuf:"varint,3,opt,name=write_success,json=writeSuccess,proto3" json:"write_success,omitempty"`
}

func (m *KVOpResult) Reset()         { *m = KVOpResult{} }
func (m *KVOpResult) String() string { return proto.CompactTextString(m) }
func (*KVOpResult) ProtoMessage()    {}
func (*KVOpResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_e32f9a2e009fbbec, []int{1}
}
func (m *KVOpResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KVOpResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KVOpResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KVOpResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVOpResult.Merge(m, src)
}
func (m *KVOpResult) XXX_Size() int {
	return m.Size()
}
func (m *KVOpResult) XXX_DiscardUnknown() {
	xxx_messageInfo_KVOpResult.DiscardUnknown(m)
}

var xxx_messageInfo_KVOpResult proto.InternalMessageInfo

func (m *KVOpResult) GetKey() Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KVOpResult) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *KVOpResult) GetWriteSuccess() bool {
	if m != nil {
		return m.WriteSuccess
	}
	return false
}

type Operation struct {
	// Types that are valid to be assigned to Type:
	//
	//	*Operation_KVOp
	Type isOperation_Type `protobuf_oneof:"type"`
}

func (m *Operation) Reset()         { *m = Operation{} }
func (m *Operation) String() string { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()    {}
func (*Operation) Descriptor() ([]byte, []int) {
	return fileDescriptor_e32f9a2e009fbbec, []int{2}
}
func (m *Operation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation.Merge(m, src)
}
func (m *Operation) XXX_Size() int {
	return m.Size()
}
func (m *Operation) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation.DiscardUnknown(m)
}

var xxx_messageInfo_Operation proto.InternalMessageInfo

type isOperation_Type interface {
	isOperation_Type()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Operation_KVOp struct {
	KVOp *KVOp `protobuf:"bytes,1,opt,name=KVOp,proto3,oneof" json:"KVOp,omitempty"`
}

func (*Operation_KVOp) isOperation_Type() {}

func (m *Operation) GetType() isOperation_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Operation) GetKVOp() *KVOp {
	if x, ok := m.GetType().(*Operation_KVOp); ok {
		return x.KVOp
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Operation) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Operation_KVOp)(nil),
	}
}

type OperationResult struct {
	// Types that are valid to be assigned to Type:
	//
	//	*OperationResult_KVOpResult
	Type isOperationResult_Type `protobuf_oneof:"type"`
}

func (m *OperationResult) Reset()         { *m = OperationResult{} }
func (m *OperationResult) String() string { return proto.CompactTextString(m) }
func (*OperationResult) ProtoMessage()    {}
func (*OperationResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_e32f9a2e009fbbec, []int{3}
}
func (m *OperationResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationResult.Merge(m, src)
}
func (m *OperationResult) XXX_Size() int {
	return m.Size()
}
func (m *OperationResult) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationResult.DiscardUnknown(m)
}

var xxx_messageInfo_OperationResult proto.InternalMessageInfo

type isOperationResult_Type interface {
	isOperationResult_Type()
	MarshalTo([]byte) (int, error)
	Size() int
}

type OperationResult_KVOpResult struct {
	KVOpResult *KVOpResult `protobuf:"bytes,1,opt,name=KVOpResult,proto3,oneof" json:"KVOpResult,omitempty"`
}

func (*OperationResult_KVOpResult) isOperationResult_Type() {}

func (m *OperationResult) GetType() isOperationResult_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *OperationResult) GetKVOpResult() *KVOpResult {
	if x, ok := m.GetType().(*OperationResult_KVOpResult); ok {
		return x.KVOpResult
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OperationResult) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OperationResult_KVOpResult)(nil),
	}
}

type Command struct {
	Timestamp   uint64                                                                     `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Ops         []Operation                                                                `protobuf:"bytes,2,rep,name=ops,proto3" json:"ops"`
	Target      github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb.PeerID `protobuf:"varint,3,opt,name=target_id,json=targetId,proto3,casttype=github.com/nithinkatla00/RL-MultiLeaderProtocolSwitcher/peer/peerpb.PeerID" json:"target_id,omitempty"`
	Meta        []byte                                                                     `protobuf:"bytes,4,opt,name=meta,proto3" json:"meta,omitempty"`
	ConflictKey []byte                                                                     `protobuf:"bytes,5,opt,name=conflict_key,json=conflictKey,proto3" json:"conflict_key,omitempty"`
	TraceInfo   map[string]string                                                          `protobuf:"bytes,6,rep,name=trace_info,json=traceInfo,proto3" json:"trace_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_e32f9a2e009fbbec, []int{4}
}
func (m *Command) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Command.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return m.Size()
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Command) GetOps() []Operation {
	if m != nil {
		return m.Ops
	}
	return nil
}

func (m *Command) GetTarget() github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb.PeerID {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *Command) GetMeta() []byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Command) GetConflictKey() []byte {
	if m != nil {
		return m.ConflictKey
	}
	return nil
}

func (m *Command) GetTraceInfo() map[string]string {
	if m != nil {
		return m.TraceInfo
	}
	return nil
}

type CommandResult struct {
	Timestamp uint64                                                                     `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	OpResults []OperationResult                                                          `protobuf:"bytes,2,rep,name=op_results,json=opResults,proto3" json:"op_results"`
	Target    github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb.PeerID `protobuf:"varint,3,opt,name=target_id,json=targetId,proto3,casttype=github.com/nithinkatla00/RL-MultiLeaderProtocolSwitcher/peer/peerpb.PeerID" json:"target_id,omitempty"`
	Meta      []byte                                                                     `protobuf:"bytes,4,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (m *CommandResult) Reset()         { *m = CommandResult{} }
func (m *CommandResult) String() string { return proto.CompactTextString(m) }
func (*CommandResult) ProtoMessage()    {}
func (*CommandResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_e32f9a2e009fbbec, []int{5}
}
func (m *CommandResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandResult.Merge(m, src)
}
func (m *CommandResult) XXX_Size() int {
	return m.Size()
}
func (m *CommandResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandResult.DiscardUnknown(m)
}

var xxx_messageInfo_CommandResult proto.InternalMessageInfo

func (m *CommandResult) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *CommandResult) GetOpResults() []OperationResult {
	if m != nil {
		return m.OpResults
	}
	return nil
}

func (m *CommandResult) GetTarget() github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb.PeerID {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *CommandResult) GetMeta() []byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

func init() {
	proto.RegisterType((*KVOp)(nil), "commandpb.KVOp")
	proto.RegisterType((*KVOpResult)(nil), "commandpb.KVOpResult")
	proto.RegisterType((*Operation)(nil), "commandpb.Operation")
	proto.RegisterType((*OperationResult)(nil), "commandpb.OperationResult")
	proto.RegisterType((*Command)(nil), "commandpb.Command")
	proto.RegisterMapType((map[string]string)(nil), "commandpb.Command.TraceInfoEntry")
	proto.RegisterType((*CommandResult)(nil), "commandpb.CommandResult")
}

func init() {
	proto.RegisterFile("pkg/command/commandpb/command.proto", fileDescriptor_e32f9a2e009fbbec)
}

var fileDescriptor_e32f9a2e009fbbec = []byte{
	// 555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0x4e, 0x9a, 0xac, 0x5b, 0xde, 0x5a, 0x86, 0xac, 0x22, 0x85, 0x1e, 0xd2, 0xae, 0x13, 0x52,
	0x25, 0xa0, 0x9d, 0xc6, 0x01, 0x34, 0x21, 0x81, 0x02, 0x48, 0x2b, 0xdd, 0xb4, 0xc9, 0xab, 0x10,
	0xe2, 0x52, 0xa5, 0xa9, 0x9b, 0x46, 0x4d, 0xe3, 0xc8, 0x71, 0x98, 0xfa, 0x0f, 0x38, 0x22, 0x7e,
	0xd5, 0x8e, 0x3b, 0x72, 0xaa, 0x50, 0xfb, 0x2f, 0x76, 0x42, 0x76, 0x92, 0xae, 0xa0, 0x5e, 0xc6,
	0x89, 0x4b, 0xf2, 0xfc, 0x7d, 0xcf, 0xdf, 0x7b, 0xf6, 0xf7, 0x64, 0x38, 0x88, 0x26, 0x5e, 0xdb,
	0xa5, 0xd3, 0xa9, 0x13, 0x0e, 0xf3, 0x7f, 0x34, 0xc8, 0xa3, 0x56, 0xc4, 0x28, 0xa7, 0xc8, 0x58,
	0x11, 0xd5, 0x8a, 0x47, 0x3d, 0x2a, 0xd1, 0xb6, 0x88, 0xd2, 0x84, 0x46, 0x17, 0xf4, 0xee, 0xa7,
	0xf3, 0x08, 0x3d, 0x06, 0x6d, 0x42, 0x66, 0xa6, 0x5a, 0x57, 0x9b, 0x25, 0x7b, 0xfb, 0x76, 0x5e,
	0xd3, 0xba, 0x64, 0x86, 0x05, 0x86, 0x2a, 0xb0, 0xf5, 0xd5, 0x09, 0x12, 0x62, 0x16, 0x04, 0x89,
	0xd3, 0x05, 0x42, 0xa0, 0x33, 0xe2, 0x0c, 0x4d, 0xad, 0xae, 0x36, 0x77, 0xb0, 0x8c, 0x1b, 0x03,
	0x00, 0x21, 0x86, 0x49, 0x9c, 0x04, 0xfc, 0xfe, 0x92, 0x07, 0x50, 0xbe, 0x62, 0x3e, 0x27, 0xfd,
	0x38, 0x71, 0x5d, 0x12, 0xc7, 0x99, 0x76, 0x49, 0x82, 0x97, 0x29, 0xd6, 0x38, 0x06, 0xe3, 0x3c,
	0x22, 0xcc, 0xe1, 0x3e, 0x0d, 0xd1, 0x93, 0xb4, 0x7b, 0x59, 0x63, 0xf7, 0x68, 0xaf, 0xb5, 0x3a,
	0x6d, 0x4b, 0xc0, 0x27, 0x0a, 0x96, 0xb4, 0x5d, 0x04, 0x9d, 0xcf, 0x22, 0xd2, 0xc0, 0xb0, 0xb7,
	0xda, 0x9b, 0x35, 0xf9, 0x72, 0xbd, 0xe5, 0x4c, 0xe7, 0xd1, 0x5f, 0x3a, 0x29, 0x79, 0xa2, 0xe0,
	0xb5, 0xd4, 0x95, 0xe6, 0x0f, 0x0d, 0xb6, 0xdf, 0xa5, 0xe9, 0xe8, 0x29, 0x18, 0xdc, 0x9f, 0x92,
	0x98, 0x3b, 0xd3, 0xb4, 0x27, 0xdd, 0x2e, 0x2f, 0xe6, 0x35, 0xa3, 0x97, 0x83, 0xf8, 0x8e, 0x47,
	0xcf, 0x40, 0xa3, 0x51, 0x6c, 0x16, 0xea, 0x5a, 0x73, 0xf7, 0xa8, 0xb2, 0x56, 0x72, 0xd5, 0xa2,
	0xad, 0x5f, 0xcf, 0x6b, 0x0a, 0x16, 0x69, 0x28, 0x01, 0x83, 0x3b, 0xcc, 0x23, 0xbc, 0xef, 0xa7,
	0x77, 0xae, 0xdb, 0x9f, 0x17, 0xf3, 0x5a, 0xb1, 0x27, 0xc1, 0xdb, 0x79, 0xed, 0xa3, 0xe7, 0xf3,
	0x71, 0x32, 0x10, 0x3a, 0xed, 0xd0, 0xe7, 0x63, 0x3f, 0x9c, 0x38, 0x3c, 0x70, 0x0e, 0x0f, 0xdb,
	0xf8, 0xf4, 0xf9, 0x59, 0x12, 0x70, 0xff, 0x94, 0x38, 0x43, 0xc2, 0x2e, 0x84, 0xed, 0x2e, 0x0d,
	0x2e, 0xaf, 0x7c, 0xee, 0x8e, 0x09, 0x6b, 0x47, 0x24, 0xfb, 0x44, 0x83, 0xd6, 0x05, 0x21, 0xac,
	0xf3, 0x1e, 0xef, 0xa4, 0xa5, 0x3a, 0x43, 0xe1, 0xf2, 0x94, 0x70, 0xc7, 0xd4, 0xa5, 0x4f, 0x32,
	0x46, 0xfb, 0x50, 0x72, 0x69, 0x38, 0x0a, 0x7c, 0x97, 0xf7, 0x85, 0xc1, 0x5b, 0x92, 0xdb, 0xcd,
	0xb1, 0x2e, 0x99, 0xa1, 0xb7, 0x00, 0x9c, 0x39, 0x2e, 0xe9, 0xfb, 0xe1, 0x88, 0x9a, 0x45, 0x79,
	0xc4, 0xfd, 0xb5, 0x23, 0x66, 0x17, 0xd6, 0xea, 0x89, 0xa4, 0x4e, 0x38, 0xa2, 0x1f, 0x42, 0xce,
	0x66, 0xd8, 0xe0, 0xf9, 0xba, 0xfa, 0x1a, 0x1e, 0xfc, 0x49, 0xa2, 0x87, 0x77, 0xe3, 0x64, 0x6c,
	0x98, 0x22, 0x23, 0x9b, 0xa2, 0xe3, 0xc2, 0x2b, 0xb5, 0xf1, 0xad, 0x00, 0xe5, 0xac, 0x46, 0xe6,
	0xf3, 0xbd, 0xac, 0x79, 0x03, 0x40, 0xa3, 0x3e, 0x93, 0x3b, 0x73, 0x87, 0xaa, 0x9b, 0x1c, 0xca,
	0x66, 0x21, 0xf5, 0xc9, 0xa0, 0xd9, 0x6c, 0xfc, 0x4f, 0x6e, 0xd9, 0xde, 0xf5, 0xc2, 0x52, 0x6f,
	0x16, 0x96, 0xfa, 0x6b, 0x61, 0xa9, 0xdf, 0x97, 0x96, 0x72, 0xb3, 0xb4, 0x94, 0x9f, 0x4b, 0x4b,
	0xf9, 0x72, 0xf6, 0xcf, 0x3d, 0x6c, 0x7a, 0x78, 0x06, 0x45, 0xf9, 0xa0, 0xbc, 0xf8, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0xac, 0x72, 0x07, 0x99, 0x98, 0x04, 0x00, 0x00,
}

func (m *KVOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KVOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KVOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Read {
		i--
		if m.Read {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KVOpResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KVOpResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KVOpResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WriteSuccess {
		i--
		if m.WriteSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Operation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Operation_KVOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation_KVOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.KVOp != nil {
		{
			size, err := m.KVOp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *OperationResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *OperationResult_KVOpResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationResult_KVOpResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.KVOpResult != nil {
		{
			size, err := m.KVOpResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Command) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TraceInfo) > 0 {
		for k := range m.TraceInfo {
			v := m.TraceInfo[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCommand(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCommand(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCommand(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ConflictKey) > 0 {
		i -= len(m.ConflictKey)
		copy(dAtA[i:], m.ConflictKey)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.ConflictKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Meta) > 0 {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x22
	}
	if m.Target != 0 {
		i = encodeVarintCommand(dAtA, i, uint64(m.Target))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Ops) > 0 {
		for iNdEx := len(m.Ops) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ops[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommand(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Timestamp != 0 {
		i = encodeVarintCommand(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommandResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Meta) > 0 {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x22
	}
	if m.Target != 0 {
		i = encodeVarintCommand(dAtA, i, uint64(m.Target))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OpResults) > 0 {
		for iNdEx := len(m.OpResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OpResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommand(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Timestamp != 0 {
		i = encodeVarintCommand(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommand(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommand(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KVOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.Read {
		n += 2
	}
	return n
}

func (m *KVOpResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.WriteSuccess {
		n += 2
	}
	return n
}

func (m *Operation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *Operation_KVOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KVOp != nil {
		l = m.KVOp.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}
func (m *OperationResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *OperationResult_KVOpResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KVOpResult != nil {
		l = m.KVOpResult.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}
func (m *Command) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovCommand(uint64(m.Timestamp))
	}
	if len(m.Ops) > 0 {
		for _, e := range m.Ops {
			l = e.Size()
			n += 1 + l + sovCommand(uint64(l))
		}
	}
	if m.Target != 0 {
		n += 1 + sovCommand(uint64(m.Target))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	l = len(m.ConflictKey)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	if len(m.TraceInfo) > 0 {
		for k, v := range m.TraceInfo {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCommand(uint64(len(k))) + 1 + len(v) + sovCommand(uint64(len(v)))
			n += mapEntrySize + 1 + sovCommand(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CommandResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovCommand(uint64(m.Timestamp))
	}
	if len(m.OpResults) > 0 {
		for _, e := range m.OpResults {
			l = e.Size()
			n += 1 + l + sovCommand(uint64(l))
		}
	}
	if m.Target != 0 {
		n += 1 + sovCommand(uint64(m.Target))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	return n
}

func sovCommand(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommand(x uint64) (n int) {
	return sovCommand(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KVOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KVOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KVOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Read", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Read = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KVOpResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KVOpResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KVOpResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WriteSuccess = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Operation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KVOp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KVOp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Operation_KVOp{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KVOpResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KVOpResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &OperationResult_KVOpResult{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Command: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Command: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ops", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ops = append(m.Ops, Operation{})
			if err := m.Ops[len(m.Ops)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			m.Target = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target |= github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb.PeerID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = append(m.Meta[:0], dAtA[iNdEx:postIndex]...)
			if m.Meta == nil {
				m.Meta = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConflictKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConflictKey = append(m.ConflictKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ConflictKey == nil {
				m.ConflictKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TraceInfo == nil {
				m.TraceInfo = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommand
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommand
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCommand
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCommand
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommand
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCommand
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCommand
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCommand(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCommand
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TraceInfo[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpResults = append(m.OpResults, OperationResult{})
			if err := m.OpResults[len(m.OpResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			m.Target = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target |= github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb.PeerID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = append(m.Meta[:0], dAtA[iNdEx:postIndex]...)
			if m.Meta == nil {
				m.Meta = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommand(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommand
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommand
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommand
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommand        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommand          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommand = fmt.Errorf("proto: unexpected end of group")
)
