// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocols/mirbft/mirbftpb/mirbft.proto

package mirbftpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb "github.com/nithinkatla00/RL-MultiLeaderProtocolSwitcher/peer/peerpb"
	commandpb "github.com/nithinkatla00/RL-MultiLeaderProtocolSwitcher/pkg/command/commandpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InstanceState_Status int32

const (
	InstanceState_None        InstanceState_Status = 0
	InstanceState_PrePrepared InstanceState_Status = 1
	InstanceState_Prepared    InstanceState_Status = 2
	InstanceState_Committed   InstanceState_Status = 3
	InstanceState_Executed    InstanceState_Status = 4
)

var InstanceState_Status_name = map[int32]string{
	0: "None",
	1: "PrePrepared",
	2: "Prepared",
	3: "Committed",
	4: "Executed",
}

var InstanceState_Status_value = map[string]int32{
	"None":        0,
	"PrePrepared": 1,
	"Prepared":    2,
	"Committed":   3,
	"Executed":    4,
}

func (x InstanceState_Status) String() string {
	return proto.EnumName(InstanceState_Status_name, int32(x))
}

func (InstanceState_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97c25b82faec9661, []int{1, 0}
}

type AgreementMessage_Type int32

const (
	AgreementMessage_PrePrepare AgreementMessage_Type = 0
	AgreementMessage_Prepare    AgreementMessage_Type = 1
	AgreementMessage_Commit     AgreementMessage_Type = 2
)

var AgreementMessage_Type_name = map[int32]string{
	0: "PrePrepare",
	1: "Prepare",
	2: "Commit",
}

var AgreementMessage_Type_value = map[string]int32{
	"PrePrepare": 0,
	"Prepare":    1,
	"Commit":     2,
}

func (x AgreementMessage_Type) String() string {
	return proto.EnumName(AgreementMessage_Type_name, int32(x))
}

func (AgreementMessage_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97c25b82faec9661, []int{2, 0}
}

type MirBFTMessage struct {
	// Types that are valid to be assigned to Type:
	//	*MirBFTMessage_Agreement
	//	*MirBFTMessage_EpochChange
	//	*MirBFTMessage_EpochChangeAck
	//	*MirBFTMessage_NewEpoch
	Type isMirBFTMessage_Type `protobuf_oneof:"type"`
}

func (m *MirBFTMessage) Reset()         { *m = MirBFTMessage{} }
func (m *MirBFTMessage) String() string { return proto.CompactTextString(m) }
func (*MirBFTMessage) ProtoMessage()    {}
func (*MirBFTMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_97c25b82faec9661, []int{0}
}
func (m *MirBFTMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MirBFTMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MirBFTMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MirBFTMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MirBFTMessage.Merge(m, src)
}
func (m *MirBFTMessage) XXX_Size() int {
	return m.Size()
}
func (m *MirBFTMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MirBFTMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MirBFTMessage proto.InternalMessageInfo

type isMirBFTMessage_Type interface {
	isMirBFTMessage_Type()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MirBFTMessage_Agreement struct {
	Agreement *AgreementMessage `protobuf:"bytes,1,opt,name=agreement,proto3,oneof" json:"agreement,omitempty"`
}
type MirBFTMessage_EpochChange struct {
	EpochChange *EpochChangeMessage `protobuf:"bytes,2,opt,name=epoch_change,json=epochChange,proto3,oneof" json:"epoch_change,omitempty"`
}
type MirBFTMessage_EpochChangeAck struct {
	EpochChangeAck *EpochChangeAckMessage `protobuf:"bytes,3,opt,name=epoch_change_ack,json=epochChangeAck,proto3,oneof" json:"epoch_change_ack,omitempty"`
}
type MirBFTMessage_NewEpoch struct {
	NewEpoch *NewEpochMessage `protobuf:"bytes,4,opt,name=new_epoch,json=newEpoch,proto3,oneof" json:"new_epoch,omitempty"`
}

func (*MirBFTMessage_Agreement) isMirBFTMessage_Type()      {}
func (*MirBFTMessage_EpochChange) isMirBFTMessage_Type()    {}
func (*MirBFTMessage_EpochChangeAck) isMirBFTMessage_Type() {}
func (*MirBFTMessage_NewEpoch) isMirBFTMessage_Type()       {}

func (m *MirBFTMessage) GetType() isMirBFTMessage_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *MirBFTMessage) GetAgreement() *AgreementMessage {
	if x, ok := m.GetType().(*MirBFTMessage_Agreement); ok {
		return x.Agreement
	}
	return nil
}

func (m *MirBFTMessage) GetEpochChange() *EpochChangeMessage {
	if x, ok := m.GetType().(*MirBFTMessage_EpochChange); ok {
		return x.EpochChange
	}
	return nil
}

func (m *MirBFTMessage) GetEpochChangeAck() *EpochChangeAckMessage {
	if x, ok := m.GetType().(*MirBFTMessage_EpochChangeAck); ok {
		return x.EpochChangeAck
	}
	return nil
}

func (m *MirBFTMessage) GetNewEpoch() *NewEpochMessage {
	if x, ok := m.GetType().(*MirBFTMessage_NewEpoch); ok {
		return x.NewEpoch
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MirBFTMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MirBFTMessage_Agreement)(nil),
		(*MirBFTMessage_EpochChange)(nil),
		(*MirBFTMessage_EpochChangeAck)(nil),
		(*MirBFTMessage_NewEpoch)(nil),
	}
}

type InstanceState struct {
	Epoch       Epoch                `protobuf:"varint,1,opt,name=epoch,proto3,casttype=Epoch" json:"epoch,omitempty"`
	Index       Index                `protobuf:"varint,2,opt,name=index,proto3,casttype=Index" json:"index,omitempty"`
	Status      InstanceState_Status `protobuf:"varint,3,opt,name=status,proto3,enum=mirbftpb.InstanceState_Status" json:"status,omitempty"`
	Command     *commandpb.Command   `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	CommandHash []byte               `protobuf:"bytes,5,opt,name=command_hash,json=commandHash,proto3" json:"command_hash,omitempty"`
}

func (m *InstanceState) Reset()         { *m = InstanceState{} }
func (m *InstanceState) String() string { return proto.CompactTextString(m) }
func (*InstanceState) ProtoMessage()    {}
func (*InstanceState) Descriptor() ([]byte, []int) {
	return fileDescriptor_97c25b82faec9661, []int{1}
}
func (m *InstanceState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstanceState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstanceState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceState.Merge(m, src)
}
func (m *InstanceState) XXX_Size() int {
	return m.Size()
}
func (m *InstanceState) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceState.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceState proto.InternalMessageInfo

func (m *InstanceState) GetEpoch() Epoch {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *InstanceState) GetIndex() Index {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *InstanceState) GetStatus() InstanceState_Status {
	if m != nil {
		return m.Status
	}
	return InstanceState_None
}

func (m *InstanceState) GetCommand() *commandpb.Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *InstanceState) GetCommandHash() []byte {
	if m != nil {
		return m.CommandHash
	}
	return nil
}

type AgreementMessage struct {
	Epoch       Epoch                 `protobuf:"varint,1,opt,name=epoch,proto3,casttype=Epoch" json:"epoch,omitempty"`
	Index       Index                 `protobuf:"varint,2,opt,name=index,proto3,casttype=Index" json:"index,omitempty"`
	Type        AgreementMessage_Type `protobuf:"varint,3,opt,name=type,proto3,enum=mirbftpb.AgreementMessage_Type" json:"type,omitempty"`
	Command     *commandpb.Command    `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	CommandHash []byte                `protobuf:"bytes,5,opt,name=command_hash,json=commandHash,proto3" json:"command_hash,omitempty"`
}

func (m *AgreementMessage) Reset()         { *m = AgreementMessage{} }
func (m *AgreementMessage) String() string { return proto.CompactTextString(m) }
func (*AgreementMessage) ProtoMessage()    {}
func (*AgreementMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_97c25b82faec9661, []int{2}
}
func (m *AgreementMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgreementMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgreementMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgreementMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgreementMessage.Merge(m, src)
}
func (m *AgreementMessage) XXX_Size() int {
	return m.Size()
}
func (m *AgreementMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AgreementMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AgreementMessage proto.InternalMessageInfo

func (m *AgreementMessage) GetEpoch() Epoch {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *AgreementMessage) GetIndex() Index {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *AgreementMessage) GetType() AgreementMessage_Type {
	if m != nil {
		return m.Type
	}
	return AgreementMessage_PrePrepare
}

func (m *AgreementMessage) GetCommand() *commandpb.Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *AgreementMessage) GetCommandHash() []byte {
	if m != nil {
		return m.CommandHash
	}
	return nil
}

type EpochChangeMessage struct {
	NewEpoch  Epoch           `protobuf:"varint,1,opt,name=new_epoch,json=newEpoch,proto3,casttype=Epoch" json:"new_epoch,omitempty"`
	LowIndex  Index           `protobuf:"varint,2,opt,name=low_index,json=lowIndex,proto3,casttype=Index" json:"low_index,omitempty"`
	HighIndex Index           `protobuf:"varint,3,opt,name=high_index,json=highIndex,proto3,casttype=Index" json:"high_index,omitempty"`
	PSet      []InstanceState `protobuf:"bytes,4,rep,name=p_set,json=pSet,proto3" json:"p_set"`
	QSet      []InstanceState `protobuf:"bytes,5,rep,name=q_set,json=qSet,proto3" json:"q_set"`
}

func (m *EpochChangeMessage) Reset()         { *m = EpochChangeMessage{} }
func (m *EpochChangeMessage) String() string { return proto.CompactTextString(m) }
func (*EpochChangeMessage) ProtoMessage()    {}
func (*EpochChangeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_97c25b82faec9661, []int{3}
}
func (m *EpochChangeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochChangeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochChangeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochChangeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochChangeMessage.Merge(m, src)
}
func (m *EpochChangeMessage) XXX_Size() int {
	return m.Size()
}
func (m *EpochChangeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochChangeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EpochChangeMessage proto.InternalMessageInfo

func (m *EpochChangeMessage) GetNewEpoch() Epoch {
	if m != nil {
		return m.NewEpoch
	}
	return 0
}

func (m *EpochChangeMessage) GetLowIndex() Index {
	if m != nil {
		return m.LowIndex
	}
	return 0
}

func (m *EpochChangeMessage) GetHighIndex() Index {
	if m != nil {
		return m.HighIndex
	}
	return 0
}

func (m *EpochChangeMessage) GetPSet() []InstanceState {
	if m != nil {
		return m.PSet
	}
	return nil
}

func (m *EpochChangeMessage) GetQSet() []InstanceState {
	if m != nil {
		return m.QSet
	}
	return nil
}

type EpochChangeAckMessage struct {
	NewEpoch Epoch                                                                      `protobuf:"varint,1,opt,name=new_epoch,json=newEpoch,proto3,casttype=Epoch" json:"new_epoch,omitempty"`
	AckFor   github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb.PeerID `protobuf:"varint,2,opt,name=ack_for,json=ackFor,proto3,casttype=github.com/nithinkatla00/RL-MultiLeaderProtocolSwitcher/peer/peerpb.PeerID" json:"ack_for,omitempty"`
	Digest   []byte                                                                     `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *EpochChangeAckMessage) Reset()         { *m = EpochChangeAckMessage{} }
func (m *EpochChangeAckMessage) String() string { return proto.CompactTextString(m) }
func (*EpochChangeAckMessage) ProtoMessage()    {}
func (*EpochChangeAckMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_97c25b82faec9661, []int{4}
}
func (m *EpochChangeAckMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochChangeAckMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochChangeAckMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochChangeAckMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochChangeAckMessage.Merge(m, src)
}
func (m *EpochChangeAckMessage) XXX_Size() int {
	return m.Size()
}
func (m *EpochChangeAckMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochChangeAckMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EpochChangeAckMessage proto.InternalMessageInfo

func (m *EpochChangeAckMessage) GetNewEpoch() Epoch {
	if m != nil {
		return m.NewEpoch
	}
	return 0
}

func (m *EpochChangeAckMessage) GetAckFor() github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb.PeerID {
	if m != nil {
		return m.AckFor
	}
	return 0
}

func (m *EpochChangeAckMessage) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

type NewEpochProof struct {
	AckFor github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb.PeerID `protobuf:"varint,2,opt,name=ack_for,json=ackFor,proto3,casttype=github.com/nithinkatla00/RL-MultiLeaderProtocolSwitcher/peer/peerpb.PeerID" json:"ack_for,omitempty"`
	Digest []byte                                                                     `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *NewEpochProof) Reset()         { *m = NewEpochProof{} }
func (m *NewEpochProof) String() string { return proto.CompactTextString(m) }
func (*NewEpochProof) ProtoMessage()    {}
func (*NewEpochProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_97c25b82faec9661, []int{5}
}
func (m *NewEpochProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewEpochProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewEpochProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewEpochProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewEpochProof.Merge(m, src)
}
func (m *NewEpochProof) XXX_Size() int {
	return m.Size()
}
func (m *NewEpochProof) XXX_DiscardUnknown() {
	xxx_messageInfo_NewEpochProof.DiscardUnknown(m)
}

var xxx_messageInfo_NewEpochProof proto.InternalMessageInfo

func (m *NewEpochProof) GetAckFor() github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb.PeerID {
	if m != nil {
		return m.AckFor
	}
	return 0
}

func (m *NewEpochProof) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

type NewEpochMessage struct {
	NewEpoch  Epoch                   `protobuf:"varint,1,opt,name=new_epoch,json=newEpoch,proto3,casttype=Epoch" json:"new_epoch,omitempty"`
	NvProof   []NewEpochProof         `protobuf:"bytes,2,rep,name=nv_proof,json=nvProof,proto3" json:"nv_proof"`
	Instances map[Index]InstanceState `protobuf:"bytes,3,rep,name=instances,proto3,castkey=Index" json:"instances" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *NewEpochMessage) Reset()         { *m = NewEpochMessage{} }
func (m *NewEpochMessage) String() string { return proto.CompactTextString(m) }
func (*NewEpochMessage) ProtoMessage()    {}
func (*NewEpochMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_97c25b82faec9661, []int{6}
}
func (m *NewEpochMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewEpochMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewEpochMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewEpochMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewEpochMessage.Merge(m, src)
}
func (m *NewEpochMessage) XXX_Size() int {
	return m.Size()
}
func (m *NewEpochMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NewEpochMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NewEpochMessage proto.InternalMessageInfo

func (m *NewEpochMessage) GetNewEpoch() Epoch {
	if m != nil {
		return m.NewEpoch
	}
	return 0
}

func (m *NewEpochMessage) GetNvProof() []NewEpochProof {
	if m != nil {
		return m.NvProof
	}
	return nil
}

func (m *NewEpochMessage) GetInstances() map[Index]InstanceState {
	if m != nil {
		return m.Instances
	}
	return nil
}

func init() {
	proto.RegisterEnum("mirbftpb.InstanceState_Status", InstanceState_Status_name, InstanceState_Status_value)
	proto.RegisterEnum("mirbftpb.AgreementMessage_Type", AgreementMessage_Type_name, AgreementMessage_Type_value)
	proto.RegisterType((*MirBFTMessage)(nil), "mirbftpb.MirBFTMessage")
	proto.RegisterType((*InstanceState)(nil), "mirbftpb.InstanceState")
	proto.RegisterType((*AgreementMessage)(nil), "mirbftpb.AgreementMessage")
	proto.RegisterType((*EpochChangeMessage)(nil), "mirbftpb.EpochChangeMessage")
	proto.RegisterType((*EpochChangeAckMessage)(nil), "mirbftpb.EpochChangeAckMessage")
	proto.RegisterType((*NewEpochProof)(nil), "mirbftpb.NewEpochProof")
	proto.RegisterType((*NewEpochMessage)(nil), "mirbftpb.NewEpochMessage")
	proto.RegisterMapType((map[Index]InstanceState)(nil), "mirbftpb.NewEpochMessage.InstancesEntry")
}

func init() {
	proto.RegisterFile("protocols/mirbft/mirbftpb/mirbft.proto", fileDescriptor_97c25b82faec9661)
}

var fileDescriptor_97c25b82faec9661 = []byte{
	// 801 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0x4f, 0x8f, 0xda, 0x56,
	0x10, 0xc7, 0xc6, 0xb0, 0x30, 0xc0, 0xc6, 0x7a, 0xea, 0x1f, 0x8a, 0x2a, 0xd8, 0x52, 0x29, 0xe2,
	0xd0, 0x98, 0x88, 0x48, 0xd5, 0x2a, 0xb7, 0x25, 0xdd, 0x28, 0xdb, 0x66, 0x11, 0x35, 0xc9, 0xa5,
	0x17, 0xeb, 0x61, 0x66, 0x6d, 0xcb, 0x60, 0x3b, 0xf6, 0x63, 0x09, 0xd7, 0x5e, 0x7b, 0xc9, 0x17,
	0xe8, 0xa1, 0xd7, 0x7e, 0x8a, 0x1e, 0x73, 0xcc, 0xb1, 0xa7, 0x6d, 0xb5, 0xfb, 0x1d, 0x7a, 0xc8,
	0xa9, 0x7a, 0xcf, 0xcf, 0x38, 0x90, 0x20, 0xad, 0xaa, 0x48, 0xbd, 0xe0, 0x79, 0x33, 0xbf, 0xf9,
	0x3d, 0xcf, 0x6f, 0x86, 0x31, 0xdc, 0x8d, 0xe2, 0x90, 0x85, 0x76, 0x38, 0x4f, 0xfa, 0x0b, 0x2f,
	0x9e, 0x5e, 0x30, 0xf9, 0x88, 0xa6, 0xd2, 0x30, 0x04, 0x80, 0x54, 0x32, 0x77, 0xeb, 0x13, 0x27,
	0x74, 0x42, 0xe1, 0xec, 0x73, 0x2b, 0x8d, 0xb7, 0xbe, 0x8e, 0x7c, 0xa7, 0x6f, 0x87, 0x8b, 0x05,
	0x0d, 0x66, 0xd9, 0x33, 0x9a, 0x66, 0x56, 0x0a, 0xea, 0xfe, 0xaa, 0x42, 0xe3, 0xdc, 0x8b, 0x87,
	0x8f, 0x9f, 0x9d, 0x63, 0x92, 0x50, 0x07, 0xc9, 0x43, 0xa8, 0x52, 0x27, 0x46, 0x5c, 0x60, 0xc0,
	0x9a, 0xca, 0x91, 0xd2, 0xab, 0x0d, 0x5a, 0x46, 0x76, 0x95, 0x71, 0x92, 0x85, 0x24, 0xfc, 0x49,
	0xc1, 0xcc, 0xe1, 0xe4, 0x04, 0xea, 0x18, 0x85, 0xb6, 0x6b, 0xd9, 0x2e, 0x0d, 0x1c, 0x6c, 0xaa,
	0x22, 0xfd, 0xcb, 0x3c, 0xfd, 0x94, 0x47, 0x1f, 0x89, 0x60, 0x4e, 0x50, 0xc3, 0xdc, 0x4b, 0x7e,
	0x00, 0xfd, 0x5d, 0x0a, 0x8b, 0xda, 0x7e, 0xb3, 0x28, 0x68, 0x3a, 0x1f, 0xa4, 0x39, 0xb1, 0xfd,
	0x9c, 0xe9, 0x10, 0xb7, 0x02, 0xe4, 0x18, 0xaa, 0x01, 0xae, 0x2c, 0xe1, 0x6d, 0x6a, 0x82, 0xe5,
	0x8b, 0x9c, 0x65, 0x84, 0x2b, 0x41, 0x94, 0xe7, 0x57, 0x02, 0xe9, 0x1a, 0x96, 0x41, 0x63, 0xeb,
	0x08, 0xbb, 0xbf, 0xab, 0xd0, 0x38, 0x0b, 0x12, 0x46, 0x03, 0x1b, 0x27, 0x8c, 0x32, 0x24, 0x1d,
	0x28, 0xa5, 0x7c, 0x5c, 0x1b, 0x6d, 0x58, 0x7d, 0x7b, 0xd5, 0x29, 0x89, 0x1c, 0x33, 0xf5, 0x73,
	0x80, 0x17, 0xcc, 0xf0, 0xa5, 0xa8, 0x5e, 0x02, 0xce, 0xb8, 0xc3, 0x4c, 0xfd, 0xe4, 0x5b, 0x28,
	0x27, 0x8c, 0xb2, 0x65, 0x22, 0x0a, 0x3b, 0x1c, 0xb4, 0xf3, 0x57, 0xda, 0xba, 0xca, 0x98, 0x08,
	0x94, 0x29, 0xd1, 0xe4, 0x1b, 0x38, 0x90, 0xcd, 0x93, 0xb5, 0x10, 0x63, 0xd3, 0x56, 0xe3, 0x51,
	0x6a, 0x99, 0x19, 0x84, 0x7c, 0x05, 0x75, 0x69, 0x5a, 0x2e, 0x4d, 0xdc, 0x66, 0xe9, 0x48, 0xe9,
	0xd5, 0xcd, 0x9a, 0xf4, 0x3d, 0xa1, 0x89, 0xdb, 0x1d, 0x41, 0x39, 0xbd, 0x82, 0x54, 0x40, 0x1b,
	0x85, 0x01, 0xea, 0x05, 0x72, 0x07, 0x6a, 0xe3, 0x18, 0xc7, 0x31, 0x46, 0x34, 0xc6, 0x99, 0xae,
	0x90, 0x3a, 0x54, 0x36, 0x27, 0x95, 0x34, 0xa0, 0xca, 0x6f, 0xf2, 0x18, 0xc3, 0x99, 0x5e, 0xe4,
	0xc1, 0xd3, 0x97, 0x68, 0x2f, 0xf9, 0x49, 0xeb, 0xfe, 0xa2, 0x82, 0xbe, 0x3b, 0x20, 0x1f, 0x41,
	0xaf, 0x07, 0x69, 0x2f, 0xa4, 0x5a, 0x9d, 0xfd, 0xc3, 0x68, 0x3c, 0x5b, 0x47, 0x68, 0x0a, 0xf0,
	0xc7, 0x17, 0xab, 0x0f, 0x1a, 0xa7, 0x27, 0x87, 0x00, 0xb9, 0x40, 0x7a, 0x81, 0xd4, 0xe0, 0x20,
	0x3b, 0x28, 0x04, 0xa0, 0x9c, 0xca, 0xa3, 0xab, 0xdd, 0x7f, 0x14, 0x20, 0xef, 0xcf, 0x3b, 0xb9,
	0xfb, 0xee, 0x4c, 0xbe, 0xa7, 0xc9, 0x66, 0x02, 0x39, 0x6e, 0x1e, 0xae, 0xac, 0x3d, 0xd2, 0x54,
	0xe6, 0xe1, 0x4a, 0x58, 0xa4, 0x07, 0xe0, 0x7a, 0x8e, 0x2b, 0x81, 0xc5, 0x5d, 0x60, 0x95, 0x07,
	0x53, 0xe4, 0x00, 0x4a, 0x91, 0x95, 0x20, 0x6b, 0x6a, 0x47, 0xc5, 0x5e, 0x6d, 0xf0, 0xf9, 0x9e,
	0xb1, 0x1b, 0x6a, 0xaf, 0xaf, 0x3a, 0x05, 0x53, 0x8b, 0x26, 0xc8, 0x78, 0xce, 0x0b, 0x91, 0x53,
	0xba, 0x55, 0xce, 0x8b, 0x09, 0xb2, 0xee, 0x1f, 0x0a, 0x7c, 0xfa, 0xc1, 0x7f, 0xe8, 0xad, 0x6b,
	0x77, 0xe0, 0x80, 0xda, 0xbe, 0x75, 0x11, 0xc6, 0xb2, 0xf2, 0xd1, 0xdb, 0xab, 0xce, 0xf7, 0x8e,
	0xc7, 0xdc, 0xe5, 0x94, 0xb7, 0xb1, 0x1f, 0x78, 0xcc, 0xf5, 0x02, 0x9f, 0xb2, 0x39, 0xbd, 0x7f,
	0xbf, 0x6f, 0x3e, 0xbd, 0x77, 0xbe, 0x9c, 0x33, 0xef, 0x29, 0xd2, 0x19, 0xc6, 0x63, 0xb9, 0x3e,
	0x27, 0x2b, 0x8f, 0xd9, 0x2e, 0xc6, 0xfd, 0x08, 0xe5, 0x4f, 0x34, 0x35, 0xc6, 0x88, 0xf1, 0xd9,
	0x77, 0x66, 0x99, 0xda, 0xfe, 0xe3, 0x30, 0x26, 0x9f, 0x41, 0x79, 0xe6, 0x39, 0x98, 0x30, 0x21,
	0x5c, 0xdd, 0x94, 0xa7, 0xee, 0x2b, 0x05, 0x1a, 0xd9, 0x7a, 0x18, 0xc7, 0x61, 0x78, 0xf1, 0xff,
	0xbf, 0xd2, 0x6f, 0x2a, 0xdc, 0xd9, 0xd9, 0x58, 0xb7, 0xd6, 0xf3, 0x18, 0x2a, 0xc1, 0xa5, 0x15,
	0xf1, 0x42, 0x9a, 0xea, 0x6e, 0x23, 0xb7, 0xea, 0x94, 0x8d, 0x3c, 0x08, 0x2e, 0xd3, 0xb2, 0x9f,
	0x43, 0xd5, 0x93, 0x8d, 0xe6, 0xeb, 0x8a, 0xa7, 0xf6, 0xf6, 0x6e, 0xd0, 0xcd, 0x4c, 0x24, 0xa7,
	0x01, 0x8b, 0xd7, 0xc3, 0x06, 0xe7, 0xfa, 0xf9, 0xaf, 0xcd, 0x28, 0x6e, 0x98, 0x5a, 0xcf, 0xe1,
	0x70, 0x1b, 0x4b, 0x74, 0x28, 0xfa, 0xb8, 0x4e, 0x8b, 0x30, 0xb9, 0x49, 0xee, 0x41, 0xe9, 0x92,
	0xce, 0x97, 0xd9, 0x57, 0x64, 0xdf, 0xe8, 0x99, 0x29, 0xea, 0xa1, 0x7a, 0xac, 0x0c, 0xfd, 0xd7,
	0xd7, 0x6d, 0xe5, 0xcd, 0x75, 0x5b, 0xf9, 0xfb, 0xba, 0xad, 0xbc, 0xba, 0x69, 0x17, 0xde, 0xdc,
	0xb4, 0x0b, 0x7f, 0xde, 0xb4, 0x0b, 0x3f, 0xfd, 0xf8, 0x9f, 0x3b, 0xb5, 0xef, 0x63, 0x3c, 0x2d,
	0x8b, 0xd0, 0x83, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xed, 0x81, 0x24, 0x06, 0xb0, 0x07, 0x00,
	0x00,
}

func (m *MirBFTMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirBFTMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MirBFTMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *MirBFTMessage_Agreement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MirBFTMessage_Agreement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Agreement != nil {
		{
			size, err := m.Agreement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMirbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *MirBFTMessage_EpochChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MirBFTMessage_EpochChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EpochChange != nil {
		{
			size, err := m.EpochChange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMirbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *MirBFTMessage_EpochChangeAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MirBFTMessage_EpochChangeAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EpochChangeAck != nil {
		{
			size, err := m.EpochChangeAck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMirbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *MirBFTMessage_NewEpoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MirBFTMessage_NewEpoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NewEpoch != nil {
		{
			size, err := m.NewEpoch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMirbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *InstanceState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstanceState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommandHash) > 0 {
		i -= len(m.CommandHash)
		copy(dAtA[i:], m.CommandHash)
		i = encodeVarintMirbft(dAtA, i, uint64(len(m.CommandHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMirbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintMirbft(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintMirbft(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.Epoch != 0 {
		i = encodeVarintMirbft(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AgreementMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgreementMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgreementMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommandHash) > 0 {
		i -= len(m.CommandHash)
		copy(dAtA[i:], m.CommandHash)
		i = encodeVarintMirbft(dAtA, i, uint64(len(m.CommandHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMirbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintMirbft(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintMirbft(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.Epoch != 0 {
		i = encodeVarintMirbft(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EpochChangeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochChangeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochChangeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QSet) > 0 {
		for iNdEx := len(m.QSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMirbft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.PSet) > 0 {
		for iNdEx := len(m.PSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMirbft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.HighIndex != 0 {
		i = encodeVarintMirbft(dAtA, i, uint64(m.HighIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.LowIndex != 0 {
		i = encodeVarintMirbft(dAtA, i, uint64(m.LowIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.NewEpoch != 0 {
		i = encodeVarintMirbft(dAtA, i, uint64(m.NewEpoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EpochChangeAckMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochChangeAckMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochChangeAckMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Digest) > 0 {
		i -= len(m.Digest)
		copy(dAtA[i:], m.Digest)
		i = encodeVarintMirbft(dAtA, i, uint64(len(m.Digest)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AckFor != 0 {
		i = encodeVarintMirbft(dAtA, i, uint64(m.AckFor))
		i--
		dAtA[i] = 0x10
	}
	if m.NewEpoch != 0 {
		i = encodeVarintMirbft(dAtA, i, uint64(m.NewEpoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewEpochProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewEpochProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewEpochProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Digest) > 0 {
		i -= len(m.Digest)
		copy(dAtA[i:], m.Digest)
		i = encodeVarintMirbft(dAtA, i, uint64(len(m.Digest)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AckFor != 0 {
		i = encodeVarintMirbft(dAtA, i, uint64(m.AckFor))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *NewEpochMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewEpochMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewEpochMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Instances) > 0 {
		for k := range m.Instances {
			v := m.Instances[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMirbft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintMirbft(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMirbft(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NvProof) > 0 {
		for iNdEx := len(m.NvProof) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NvProof[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMirbft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.NewEpoch != 0 {
		i = encodeVarintMirbft(dAtA, i, uint64(m.NewEpoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMirbft(dAtA []byte, offset int, v uint64) int {
	offset -= sovMirbft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MirBFTMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *MirBFTMessage_Agreement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Agreement != nil {
		l = m.Agreement.Size()
		n += 1 + l + sovMirbft(uint64(l))
	}
	return n
}
func (m *MirBFTMessage_EpochChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochChange != nil {
		l = m.EpochChange.Size()
		n += 1 + l + sovMirbft(uint64(l))
	}
	return n
}
func (m *MirBFTMessage_EpochChangeAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochChangeAck != nil {
		l = m.EpochChangeAck.Size()
		n += 1 + l + sovMirbft(uint64(l))
	}
	return n
}
func (m *MirBFTMessage_NewEpoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewEpoch != nil {
		l = m.NewEpoch.Size()
		n += 1 + l + sovMirbft(uint64(l))
	}
	return n
}
func (m *InstanceState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovMirbft(uint64(m.Epoch))
	}
	if m.Index != 0 {
		n += 1 + sovMirbft(uint64(m.Index))
	}
	if m.Status != 0 {
		n += 1 + sovMirbft(uint64(m.Status))
	}
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovMirbft(uint64(l))
	}
	l = len(m.CommandHash)
	if l > 0 {
		n += 1 + l + sovMirbft(uint64(l))
	}
	return n
}

func (m *AgreementMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovMirbft(uint64(m.Epoch))
	}
	if m.Index != 0 {
		n += 1 + sovMirbft(uint64(m.Index))
	}
	if m.Type != 0 {
		n += 1 + sovMirbft(uint64(m.Type))
	}
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovMirbft(uint64(l))
	}
	l = len(m.CommandHash)
	if l > 0 {
		n += 1 + l + sovMirbft(uint64(l))
	}
	return n
}

func (m *EpochChangeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewEpoch != 0 {
		n += 1 + sovMirbft(uint64(m.NewEpoch))
	}
	if m.LowIndex != 0 {
		n += 1 + sovMirbft(uint64(m.LowIndex))
	}
	if m.HighIndex != 0 {
		n += 1 + sovMirbft(uint64(m.HighIndex))
	}
	if len(m.PSet) > 0 {
		for _, e := range m.PSet {
			l = e.Size()
			n += 1 + l + sovMirbft(uint64(l))
		}
	}
	if len(m.QSet) > 0 {
		for _, e := range m.QSet {
			l = e.Size()
			n += 1 + l + sovMirbft(uint64(l))
		}
	}
	return n
}

func (m *EpochChangeAckMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewEpoch != 0 {
		n += 1 + sovMirbft(uint64(m.NewEpoch))
	}
	if m.AckFor != 0 {
		n += 1 + sovMirbft(uint64(m.AckFor))
	}
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovMirbft(uint64(l))
	}
	return n
}

func (m *NewEpochProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AckFor != 0 {
		n += 1 + sovMirbft(uint64(m.AckFor))
	}
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovMirbft(uint64(l))
	}
	return n
}

func (m *NewEpochMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewEpoch != 0 {
		n += 1 + sovMirbft(uint64(m.NewEpoch))
	}
	if len(m.NvProof) > 0 {
		for _, e := range m.NvProof {
			l = e.Size()
			n += 1 + l + sovMirbft(uint64(l))
		}
	}
	if len(m.Instances) > 0 {
		for k, v := range m.Instances {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovMirbft(uint64(k)) + 1 + l + sovMirbft(uint64(l))
			n += mapEntrySize + 1 + sovMirbft(uint64(mapEntrySize))
		}
	}
	return n
}

func sovMirbft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMirbft(x uint64) (n int) {
	return sovMirbft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MirBFTMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirBFTMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirBFTMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agreement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMirbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AgreementMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &MirBFTMessage_Agreement{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMirbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EpochChangeMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &MirBFTMessage_EpochChange{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochChangeAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMirbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EpochChangeAckMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &MirBFTMessage_EpochChangeAck{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMirbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NewEpochMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &MirBFTMessage_NewEpoch{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMirbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstanceState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstanceState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= Epoch(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= InstanceState_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMirbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &commandpb.Command{}
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMirbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMirbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandHash = append(m.CommandHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CommandHash == nil {
				m.CommandHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMirbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgreementMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgreementMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgreementMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= Epoch(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AgreementMessage_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMirbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &commandpb.Command{}
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMirbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMirbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandHash = append(m.CommandHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CommandHash == nil {
				m.CommandHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMirbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochChangeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochChangeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochChangeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewEpoch", wireType)
			}
			m.NewEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewEpoch |= Epoch(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowIndex", wireType)
			}
			m.LowIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowIndex |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighIndex", wireType)
			}
			m.HighIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighIndex |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMirbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PSet = append(m.PSet, InstanceState{})
			if err := m.PSet[len(m.PSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMirbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QSet = append(m.QSet, InstanceState{})
			if err := m.QSet[len(m.QSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMirbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochChangeAckMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochChangeAckMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochChangeAckMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewEpoch", wireType)
			}
			m.NewEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewEpoch |= Epoch(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckFor", wireType)
			}
			m.AckFor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckFor |= github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb.PeerID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMirbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMirbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = append(m.Digest[:0], dAtA[iNdEx:postIndex]...)
			if m.Digest == nil {
				m.Digest = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMirbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewEpochProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewEpochProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewEpochProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckFor", wireType)
			}
			m.AckFor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckFor |= github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb.PeerID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMirbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMirbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = append(m.Digest[:0], dAtA[iNdEx:postIndex]...)
			if m.Digest == nil {
				m.Digest = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMirbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewEpochMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewEpochMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewEpochMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewEpoch", wireType)
			}
			m.NewEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewEpoch |= Epoch(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NvProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMirbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NvProof = append(m.NvProof, NewEpochProof{})
			if err := m.NvProof[len(m.NvProof)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMirbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Instances == nil {
				m.Instances = make(map[Index]InstanceState)
			}
			var mapkey uint64
			mapvalue := &InstanceState{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMirbft
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMirbft
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMirbft
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMirbft
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMirbft
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &InstanceState{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMirbft(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMirbft
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Instances[Index(mapkey)] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMirbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMirbft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMirbft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMirbft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMirbft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMirbft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMirbft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMirbft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMirbft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMirbft = fmt.Errorf("proto: unexpected end of group")
)
