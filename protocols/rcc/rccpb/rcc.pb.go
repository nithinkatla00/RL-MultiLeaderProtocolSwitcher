// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocols/rcc/rccpb/rcc.proto

package rccpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb "github.com/nithinkatla00/RL-MultiLeaderProtocolSwitcher/peer/peerpb"
	peerpb "github.com/nithinkatla00/RL-MultiLeaderProtocolSwitcher/peer/peerpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RCCMessage_Kind int32

const (
	RCCMessage_None       RCCMessage_Kind = 0
	RCCMessage_Orderer    RCCMessage_Kind = 1
	RCCMessage_Replicator RCCMessage_Kind = 2
)

var RCCMessage_Kind_name = map[int32]string{
	0: "None",
	1: "Orderer",
	2: "Replicator",
}

var RCCMessage_Kind_value = map[string]int32{
	"None":       0,
	"Orderer":    1,
	"Replicator": 2,
}

func (x RCCMessage_Kind) String() string {
	return proto.EnumName(RCCMessage_Kind_name, int32(x))
}

func (RCCMessage_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f1347a7ccfbc0e13, []int{0, 0}
}

type RCCMessage struct {
	Message peerpb.Message                                                             `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Kind    RCCMessage_Kind                                                            `protobuf:"varint,2,opt,name=kind,proto3,enum=rccpb.RCCMessage_Kind" json:"kind,omitempty"`
	PeerID  github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb.PeerID `protobuf:"varint,3,opt,name=replica_id,json=replicaId,proto3,casttype=github.com/nithinkatla00/RL-MultiLeaderProtocolSwitcher/peer/peerpb.PeerID" json:"replica_id,omitempty"`
}

func (m *RCCMessage) Reset()         { *m = RCCMessage{} }
func (m *RCCMessage) String() string { return proto.CompactTextString(m) }
func (*RCCMessage) ProtoMessage()    {}
func (*RCCMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1347a7ccfbc0e13, []int{0}
}
func (m *RCCMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RCCMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RCCMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RCCMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RCCMessage.Merge(m, src)
}
func (m *RCCMessage) XXX_Size() int {
	return m.Size()
}
func (m *RCCMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RCCMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RCCMessage proto.InternalMessageInfo

func (m *RCCMessage) GetMessage() peerpb.Message {
	if m != nil {
		return m.Message
	}
	return peerpb.Message{}
}

func (m *RCCMessage) GetKind() RCCMessage_Kind {
	if m != nil {
		return m.Kind
	}
	return RCCMessage_None
}

func (m *RCCMessage) GetPeerID() github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb.PeerID {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func init() {
	proto.RegisterEnum("rccpb.RCCMessage_Kind", RCCMessage_Kind_name, RCCMessage_Kind_value)
	proto.RegisterType((*RCCMessage)(nil), "rccpb.RCCMessage")
}

func init() { proto.RegisterFile("protocols/rcc/rccpb/rcc.proto", fileDescriptor_f1347a7ccfbc0e13) }

var fileDescriptor_f1347a7ccfbc0e13 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xcf, 0x6a, 0xfa, 0x40,
	0x10, 0xc7, 0xb3, 0xfe, 0xf2, 0xd3, 0x76, 0x04, 0x2b, 0x4b, 0x11, 0x11, 0x1a, 0xc5, 0x93, 0x14,
	0xdc, 0x88, 0x7d, 0x03, 0xed, 0xc5, 0xaa, 0xad, 0xa4, 0x97, 0xd2, 0x4b, 0xc9, 0x9f, 0x21, 0x2e,
	0xc6, 0x6c, 0x58, 0x57, 0x7c, 0x8d, 0xf6, 0xad, 0x3c, 0x7a, 0xec, 0x49, 0x4a, 0x7c, 0x8b, 0x9e,
	0x4a, 0x36, 0x29, 0x3d, 0xf4, 0xd6, 0xc3, 0xce, 0x0e, 0x9f, 0xfd, 0xee, 0xec, 0x77, 0x76, 0xe0,
	0x2a, 0x91, 0x42, 0x09, 0x5f, 0x44, 0x1b, 0x5b, 0xfa, 0x7e, 0xb6, 0x12, 0x2f, 0x8b, 0x4c, 0x73,
	0xfa, 0x5f, 0x83, 0xd6, 0x65, 0x28, 0x42, 0xa1, 0x89, 0x9d, 0x65, 0xf9, 0x61, 0xab, 0x91, 0x20,
	0x4a, 0x3b, 0x0b, 0x89, 0xa7, 0xb7, 0x9c, 0x77, 0xdf, 0x4a, 0x00, 0xce, 0x78, 0x3c, 0xc7, 0xcd,
	0xc6, 0x0d, 0x91, 0xda, 0x50, 0x59, 0xe7, 0x69, 0x93, 0x74, 0x48, 0xaf, 0x3a, 0xbc, 0x60, 0xf9,
	0x1d, 0x56, 0x28, 0x46, 0xe6, 0xfe, 0xd8, 0x36, 0x9c, 0x6f, 0x15, 0xbd, 0x06, 0x73, 0xc5, 0xe3,
	0xa0, 0x59, 0xea, 0x90, 0x5e, 0x6d, 0xd8, 0x60, 0xda, 0x03, 0xfb, 0xa9, 0xc8, 0xa6, 0x3c, 0x0e,
	0x1c, 0xad, 0xa1, 0x3b, 0x00, 0x89, 0x49, 0xc4, 0x7d, 0xf7, 0x85, 0x07, 0xcd, 0x7f, 0x1d, 0xd2,
	0x33, 0x47, 0x4f, 0xe9, 0xb1, 0x5d, 0x5e, 0x20, 0xca, 0xc9, 0xed, 0xe7, 0xb1, 0x7d, 0x17, 0x72,
	0xb5, 0xdc, 0x7a, 0xcc, 0x17, 0x6b, 0x3b, 0xe6, 0x6a, 0xc9, 0xe3, 0x95, 0xab, 0x22, 0x77, 0x30,
	0xb0, 0x9d, 0x59, 0x7f, 0xbe, 0x8d, 0x14, 0x9f, 0xa1, 0x1b, 0xa0, 0x5c, 0x14, 0x1f, 0xf1, 0xb8,
	0xe3, 0xca, 0x5f, 0x16, 0x8d, 0x15, 0xdd, 0xb1, 0xbc, 0x9a, 0x73, 0x5e, 0xbc, 0x35, 0x09, 0xba,
	0x7d, 0x30, 0x33, 0x1b, 0xf4, 0x0c, 0xcc, 0x7b, 0x11, 0x63, 0xdd, 0xa0, 0x55, 0xa8, 0x3c, 0xc8,
	0x00, 0x25, 0xca, 0x3a, 0xa1, 0x35, 0x00, 0x27, 0xd7, 0x2a, 0x21, 0xeb, 0xa5, 0x11, 0xee, 0x53,
	0x8b, 0x1c, 0x52, 0x8b, 0x7c, 0xa4, 0x16, 0x79, 0x3d, 0x59, 0xc6, 0xe1, 0x64, 0x19, 0xef, 0x27,
	0xcb, 0x78, 0x9e, 0xfe, 0xd9, 0xdf, 0xef, 0xc9, 0x79, 0x65, 0x0d, 0x6f, 0xbe, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x6e, 0x6a, 0x0f, 0x6f, 0xd7, 0x01, 0x00, 0x00,
}

func (m *RCCMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RCCMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RCCMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PeerID != 0 {
		i = encodeVarintRcc(dAtA, i, uint64(m.PeerID))
		i--
		dAtA[i] = 0x18
	}
	if m.Kind != 0 {
		i = encodeVarintRcc(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRcc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintRcc(dAtA []byte, offset int, v uint64) int {
	offset -= sovRcc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RCCMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Message.Size()
	n += 1 + l + sovRcc(uint64(l))
	if m.Kind != 0 {
		n += 1 + sovRcc(uint64(m.Kind))
	}
	if m.PeerID != 0 {
		n += 1 + sovRcc(uint64(m.PeerID))
	}
	return n
}

func sovRcc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRcc(x uint64) (n int) {
	return sovRcc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RCCMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RCCMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RCCMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= RCCMessage_Kind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= github_com_nithinkatla00_RL_MultiLeaderProtocolSwitcher_peer_peerpb.PeerID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRcc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRcc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRcc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRcc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRcc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRcc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRcc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRcc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRcc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRcc = fmt.Errorf("proto: unexpected end of group")
)
